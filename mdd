import {Accordion, AccordionDetails, AccordionSummary, Grid, Typography} from "@mui/material";
import React from 'react';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import {ClaimDetailSearchRecord} from "../../useClaimsDetails/use-claims-details.types";
import {ClaimsDetailsProps} from "../claims-details.types";
import {ClaimRequestParams} from "../../../common/model-types";
import {PrescriptionDrugEvents} from "../../../prescription-drug-event/PrescriptionDrugEvent/prescription-drug-events";

export function PrescriptionDrugEventTab(props: ClaimsDetailsProps) {

  const {context} = props;
  const contextObj = context;
  const [prescriptionDrug, setPrescriptionDrug] = React.useState(false);

  console.log('In PrescriptionDrugEventTab: contextObj=', contextObj);
  const detail: ClaimDetailSearchRecord = context.searchDetailParam;
  const requestParams: ClaimRequestParams = {
    rxClaimNbr: detail.rxClaimNbr as number,
    rxSeq: detail.rxSeq as number,
    tenantId: detail.tenantId as string,
    sid: contextObj.sid as string,
    authType: contextObj.authtype as string,
    expanded: true
  };


  function handlePrescriptionDrug() {
    setPrescriptionDrug(!prescriptionDrug);
    console.log('handleAccordionChange');
  }

  return (<>
    <Grid container spacing={2} alignItems="start">
      <Grid item xs={12}>
        <Accordion id="messages" expanded={prescriptionDrug} onChange={handlePrescriptionDrug}
                   style={
                     {
                       flexDirection: "row-reverse",
                       border: "none",
                       boxShadow: "none",
                       margin: "5px",
                       maxWidth: "97%"
                     }
                   }>
          <AccordionSummary expandIcon={<ExpandMoreIcon/>}>
            <Typography variant="h6">CMS prescription drug event file</Typography>
          </AccordionSummary>
          <AccordionDetails>
            {prescriptionDrug &&  <PrescriptionDrugEvents {...requestParams}/>}
          </AccordionDetails>
        </Accordion>
      </Grid>
    </Grid>
  </>);
}
======

 
import React, {useEffect, useState} from 'react';

import {
  usePrescriptionDrugEvents
} from '../usePrescriptionDrugEvent/use-prescription-drug-events';

import {PrescriptionDrugEventProps} from './prescription-drug-events.types';

import {PrescriptionDrugEventsTable} from "./components/prescription-drug-events-table";

export function PrescriptionDrugEvents(params: PrescriptionDrugEventProps) {
  console.log('In PrescriptionDrugEvents', 'params=', params);
  const {prescrionDrugEvents1} = usePrescriptionDrugEvents(params);
  const [prescrionDrugEvents, setprescrionDrugEvents] = useState({});
  console.log('In PrescriptionDrugEvents', 'prescrionDrugEvents=', prescrionDrugEvents1);



  useEffect(() => {
      console.log('In PrescriptionDrugEvents: in useEffect ', prescrionDrugEvents1);
      setprescrionDrugEvents(prescrionDrugEvents1);
  }, [params, prescrionDrugEvents1]);
  return (
    <>
      {prescrionDrugEvents && prescrionDrugEvents?.medicarePartDMddFiles === null && <div>No Prescription Drug Events Found</div>}
      {prescrionDrugEvents && prescrionDrugEvents?.medicarePartDMddFiles && <PrescriptionDrugEventsTable  {...prescrionDrugEvents}  > </PrescriptionDrugEventsTable>}
    </>
);
}

export default PrescriptionDrugEvents;

==========



import React, {useState} from 'react';
import {getData} from "../../model/service/claimService";
import {
  PrescriptionDrugEventResponseType,
  usePrescrionDrugEventDetailsProps, usePrescrionDrugEventDetailsReturn,
  usePrescrionDrugEventsProps,
  usePrescrionDrugEventsReturn
} from "./use-prescription-drug-events.types";

export function usePrescriptionDrugEvents(request: usePrescrionDrugEventsProps) : any {
  console.log('In usePrescriptionDrugEvents', 'request=', request);

  const [prescriptionDrugEvents, setPrescriptionDrugEvents] = React.useState<PrescriptionDrugEventResponseType>({ rxClaimNbr: 0, rxSeqNbr: 0, message: '', medicarePartDMddFiles: []});

  React.useEffect(() => {
    console.log('In usePrescriptionDrugEvent: in useEffect');
    fetchPharmDSumaryData().then(r => console.log('r=', r));
  }, []);

  const fetchPharmDSumaryData = async () => {
    try {
      console.log('In usePrescriptionDrugEvent: request=', {rxClaimNbr: request.rxClaimNbr, rxSeq: request.rxSeq,  tenantId:  request.tenantId});
      let response:any = {};
      try {
        response = await getData(`/get-cms-pde?rxClaimNbr=${request.rxClaimNbr}&rxSeqNbr=${request.rxSeq}&tenantId=${request.tenantId}`,
          {sid: request.sid, 'auth-type': undefined});
      } catch (e) {
        console.log('In usePrescriptionDrugEvent: Error fetching data:', e);
      }
      console.log('In usePrescriptionDrugEvent: messages', {...response});
      // setPrescriptionDrugEvents({...response.data});
      // temporary hard coded data
      setPrescriptionDrugEvents({
        'rxClaimNbr': 233062399615000,
        "rxSeqNbr": 999,
        "message": "successful",
        "medicarePartDMddFiles": [
          {
            "mdhFileId": "PD23306302",
            "mdhSubmitterId": "KSID",
            "mdhFileFromDate": "20230101",
            "mdhFileThruDate": "20231231",
            "createDate": "20231102",
            "txnReportStatus": null,
            "resubmissionStatus": null
          },
          {
            "mdhFileId": "PD23306321",
            "mdhSubmitterId": "KSID",
            "mdhFileFromDate": "20230101",
            "mdhFileThruDate": "20231231",
            "createDate": "20231102",
            "txnReportStatus": null,
            "resubmissionStatus": null
          },
          {
            "mdhFileId": "PD23307031",
            "mdhSubmitterId": "KSID",
            "mdhFileFromDate": "20230101",
            "mdhFileThruDate": "20231231",
            "createDate": "20231103",
            "txnReportStatus": null,
            "resubmissionStatus": null
          }
        ]
      });
      // setLoading(false);
      // return response.data;
      return prescriptionDrugEvents;
    } catch (error) {
      console.error('In usePrescriptionDrugEvent: Error fetching data:', error);
      //  setLoading(false);
    }
    return;
  };

  console.log('In usePrescriptionDrugEvent: messages=', prescriptionDrugEvents);
  return {
    prescriptionDrugEvents
  };
}



export function usePrescriptionDrugEventDetails(request: usePrescrionDrugEventDetailsProps) : usePrescrionDrugEventDetailsReturn {


  const [prescriptionDrugEventDetails, setPrescriptionDrugEventDetails] = React.useState<PrescriptionDrugEventDetailType>({});

  React.useEffect(() => {
    console.log('In usePrescriptionDrugEvent: in useEffect');
    fetchPharmDSumaryData().then(r => console.log('r=', r));
  }, []);

  const fetchPharmDSumaryData = async () => {
    try {
      console.log('In usePrescriptionDrugEvent: request=', {mdhFileId: request.mdhFileId, submitterId: request.submitterId,  tenantId:  request.tenantId});
      const response = await getData(`/get-mdd-pde?mdhFileId=${request.mdhFileId}&submitterId=${request.submitterId}&tenantId=${request.tenantId}`,
        {sid: request.sid, 'auth-type': undefined});
      console.log('In usePrescriptionDrugEvent: messages', {...response.data});
      // setPrescriptionDrugEventDetails({...response.data});
      // temporary hard coded data
      setPrescriptionDrugEventDetails({
        "rxClaimNumber": "223391218959000",
        "claimSeqNbr": "999",
        "memberId": "PDEDLTCRM1        ",
        "carrierId": "PDEDLTCR ",
        "accountId": "PDEDLTCRA1     ",
        "groupId": "PDEDLTCRG1     ",
        "mdhFileId": "PD22339011",
        "submitterId": "A9823",
        "pbpId": "989",
        "contractId": "A9823",
        "message": "successful",
        "mddDetailRecord": {
          "drugCoverageStsCd": "C",
          "adjustCd": " ",
          "cmsAuditFlag": null,
          "md2PartDModelInd": null,
          "catastrophicCovCd": null,
          "sbmOriginCd": "0",
          "nonStandardCd": "P",
          "pricingExceptionCd": "O",
          "hicn": "PDEDLTCRM1",
          "tier": "1",
          "ingredientCost": "1.70",
          "dispFee": "3.50",
          "salesTax": "10.00",
          "pdePatPay": "15.20",
          "estRebateAtPos": 0,
          "gdcaAmount": "0.00",
          "gdcbAmount": "15.20",
          "otherTroopAmt": "0.00",
          "licsAmt": "0.00",
          "plroAmt": "0.00",
          "cppAmt": "0.00",
          "nppAmt": "0.00",
          "vaccineAdminFee": 0,
          "sbmPrescriberQl": null,
          "sbmPrescriberId": null,
          "cmsTransReportStatus": "A",
          "transReportStsDate": 1221205,
          "mddEditCount": 0,
          "edit01": null,
          "edit02": null,
          "edit03": null,
          "edit04": null,
          "edit05": null,
          "edit06": null,
          "edit07": null,
          "edit08": null,
          "edit09": null,
          "edit10": null,
          "exclusionRsnCd": null,
          "resubCmstype": null,
          "resubmissionSts": null,
          "rsubmissionDate": null,
          "resubTime": null,
          "resubUser": null,
          "reporocFileId": null,
          "reporocSubId": null,
          "reporocDate": null,
          "reporocTime": null,
          "reporocUser": null,
          "brandGenCd": null,
          "formularyCd": null,
          "beginBenefitPhase": null,
          "endBenefitPhase": null,
          "dateOrigClaimRcvd": null,
          "paidDate": null,
          "totlGrossDrgCstAcc": null,
          "othTroopamtInd": null,
          "trueOopAccum": null,
          "reportedGapDiscount": null,
          "subDos": null,
          "sbmQtyDisp": null,
          "sbmDysSupply": null,
          "sbmPscCd": null,
          "sbmRxNumber": null,
          "sbmFillNumber": null,
          "adjBeginTimeStamp": null,
          "nonPecosNpiInd": null,
          "adjRsnCdQl": null,
          "adjRsnCd": null,
          "sbmSrvProvIdQl": null,
          "sbmSrvProvId": null,
          "sbmPharServiceType": null,
          "patientResidence": null,
          "scc": null,
          "sbmCmpdCd": null,
          "sbmProductId": null
        },
        "mddResponseRecord": {
          "calcGapDiscount": 0.00,
          "pbpOfRecord": null,
          "altSrvProvIdQl": null,
          "altSrvProvId": null,
          "origSbmContract": null,
          "contractOfRecord": null,
          "correctedHicn": null,
          "patientGenderCd": "1",
          "dob": 0,
          "mddEditCount": 0,
          "edit01": null,
          "edit02": null,
          "edit03": null,
          "edit04": null,
          "edit05": null,
          "edit06": null,
          "edit07": null,
          "edit08": null,
          "edit09": null,
          "edit10": null,
          "exclusionRsnCd": null,
          "resubmissionSts": "N",
          "rsubmissionDate": 0,
          "resubTime": 0,
          "resubUser": null,
          "reporocFileId": null,
          "reporocSubId": null,
          "reporocDate": 0,
          "reporocTime": "0",
          "reporocUser": null
        }
      })
      // setLoading(false);
     // return response.data;
      return prescriptionDrugEventDetails;
    } catch (error) {
      console.error('In usePrescriptionDrugEvent: Error fetching data:', error);
      //  setLoading(false);
    }
    return;
  };

  console.log('In usePrescriptionDrugEvent: messages=', setPrescriptionDrugEventDetails);
  return {
    prescriptionDrugEventDetails
  };
}

export default usePrescriptionDrugEvents;


====
import React from 'react';



import TableContainer from "@mui/material/TableContainer";
import Paper from "@mui/material/Paper";
import Table from "@mui/material/Table";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import TableCell from "@mui/material/TableCell";
import TableBody from "@mui/material/TableBody";
import IconButton from "@mui/material/IconButton";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import Collapse from "@mui/material/Collapse";
import Box from "@mui/material/Box";
import Typography from "@mui/material/Typography";

export function PrescriptionDrugEventsTable(prescrionDrugEvents: any) {
  console.log('In PrescriptionDrugEventsTable', 'prescrionDrugEvents=', prescrionDrugEvents);


  function Row(props: { row: any}) {
    const {row} = props;
    console.log('In PrescriptionDrugEventsTable: Row', 'row=', row);
    const [open, setOpen] = React.useState(false);

    return (
      <>
      {row?.mdhFileId && (  <React.Fragment>
        <TableRow sx={{'& > *': {borderBottom: 'unset'}}}>
          <TableCell>
            <IconButton
              aria-label="expand row"
              size="small"
              onClick={() => setOpen(!open)}
            >
              {open ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}
            </IconButton>
          </TableCell>
          <TableCell component="th" scope="row">
            {row.mdhFileId}
          </TableCell>
          <TableCell align="right">{row.mdhSubmitterId}</TableCell>
          <TableCell align="right">{row.mdhFileFromDate}</TableCell>
          <TableCell align="right">{row.mdhFileThruDate}</TableCell>
          <TableCell align="right">{row.createDate}</TableCell>
          <TableCell align="right">{row.txnReportStatus}</TableCell>
          <TableCell align="right">{row.resubmissionStatus}</TableCell>
        </TableRow>
        <TableRow>
          <TableCell style={{paddingBottom: 0, paddingTop: 0}} colSpan={6}>
            <Collapse in={open} timeout="auto" unmountOnExit>
              <Box sx={{margin: 1}}>
                <Typography variant="h6" gutterBottom component="div">
                  Details
                </Typography>
                {/*<PrescriptionDrugEventDetails mdhFileId={row.mdhFileId} submitterId={row.mdhSubmitterId} tenantId={params.tenantId} sid={params.sid}/>*/}
              </Box>
            </Collapse>
          </TableCell>
        </TableRow>
      </React.Fragment>)}
      </>
    );
  }

  return (
    <>
    {  prescrionDrugEvents && (<TableContainer component={Paper}>
      <Table aria-label="collapsible table">
        <TableHead>
          <TableRow>
            <TableCell/>
            <TableCell>File</TableCell>
            <TableCell align="right">Submitter</TableCell>
            <TableCell align="right">From</TableCell>
            <TableCell align="right">Through</TableCell>
            <TableCell align="right">Created</TableCell>
            <TableCell align="right">Transaction report status</TableCell>
            <TableCell align="right">Resubmit status</TableCell>
            <TableCell align="right">Response</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {prescrionDrugEvents && prescrionDrugEvents?.map((row: any) => (
                <Row  row={row}/>
          ))}
        </TableBody>
      </Table>
    </TableContainer>)}
    </>
  );

}

export default PrescriptionDrugEventsTable;
===
import * as React from 'react';

import SimpleLayoutComponent from "../../../claims-details/ClaimsDetails/components/simple-layout-compoent";
import labels from "../../../common/labels.json";

import {usePrescriptionDrugEventDetails} from "../../usePrescriptionDrugEvent/use-prescription-drug-events";
import {usePrescrionDrugEventDetailsProps} from "../../usePrescriptionDrugEvent/use-prescription-drug-events.types";
const prescrionDrugEventLayout =  [
  {
    heading: 'MDD Detail Record',
    fields: [
      "drugCoverageStsCd",
      "adjustCd",
      "cmsAuditFlag",
      "md2PartDModelInd",
      "catastrophicCovCd",
      "sbmOriginCd",
      "nonStandardCd",
      "pricingExceptionCd",
      "hicn",
      "tier",
      "ingredientCost",
      "dispFee",
      "salesTax",
      "pdePatPay",
      "estRebateAtPos",
      "gdcaAmount",
      "gdcbAmount",
      "otherTroopAmt",
      "licsAmt",
      "plroAmt",
      "cppAmt",
      "nppAmt",
      "vaccineAdminFee",
      "sbmPrescriberQl",
      "sbmPrescriberId",
      "cmsTransReportStatus",
      "transReportStsDate",
      "mddEditCount",
      "edit01",
      "edit02",
      "edit03",
      "edit04",
      "edit05",
      "edit06",
      "edit07",
      "edit08",
      "edit09",
      "edit10",
      "exclusionRsnCd",
      "resubCmstype",
      "resubmissionSts",
      "rsubmissionDate",
      "resubTime",
      "resubUser",
      "reporocFileId",
      "reporocSubId",
      "reporocDate",
      "reporocTime",
      "reporocUser",
      "brandGenCd",
      "formularyCd",
      "beginBenefitPhase",
      "endBenefitPhase",
      "dateOrigClaimRcvd",
      "paidDate",
      "totlGrossDrgCstAcc",
      "othTroopamtInd",
      "trueOopAccum",
      "reportedGapDiscount",
      "subDos",
      "sbmQtyDisp",
      "sbmDysSupply",
      "sbmPscCd",
      "sbmRxNumber",
      "sbmFillNumber",
      "adjBeginTimeStamp",
      "nonPecosNpiInd",
      "adjRsnCdQl",
      "adjRsnCd",
      "sbmSrvProvIdQl",
      "sbmSrvProvId",
      "sbmPharServiceType",
      "patientResidence",
      "scc",
      "sbmCmpdCd",
      "sbmProductId"
    ],
  },
  {
    heading: 'Response',
    fields: [
      "calcGapDiscount",
      "pbpOfRecord",
      "altSrvProvIdQl",
      "altSrvProvId",
      "origSbmContract",
      "contractOfRecord",
      "correctedHicn",
      "patientGenderCd",
      "dob",
      "mddEditCount",
      "edit01",
      "edit02",
      "edit03",
      "edit04",
      "edit05",
      "edit06",
      "edit07",
      "edit08",
      "edit09",
      "edit10",
      "exclusionRsnCd",
      "resubmissionSts",
      "rsubmissionDate",
      "resubTime",
      "resubUser",
      "reporocFileId",
      "reporocSubId",
      "reporocDate",
      "reporocTime",
      "reporocUser"
    ]
  }
];
export function PrescriptionDrugEventDetails(params: usePrescrionDrugEventDetailsProps) {
  const {prescriptionDrugEventDetails} = usePrescriptionDrugEventDetails(params);

  return (
      <SimpleLayoutComponent
        layout={prescrionDrugEventLayout}
        data={prescriptionDrugEventDetails}
        labels={labels}></SimpleLayoutComponent>
  );
}
====

export interface usePrescrionDrugEventsProps {
  rxClaimNbr: number;
  rxSeq: number;
  tenantId: string;
  sid: string;
  authType: string;
  expanded: boolean;
}

export interface PrescriptionDrugEventResponseType {
  rxClaimNbr: number,
  rxSeqNbr: number,
  message: string,
  medicarePartDMddFiles: any[]
}

export interface PrescriptionDrugEventType {
  mdhFileId: number,
  mdhSubmitterId: number,
  mdhFileFromDate: string,
  mdhFileThruDate: string,
  createDate: string,
  txnReportStatus: string | null,
  resubmissionStatus: string| null,
}


export interface usePrescrionDrugEventsReturn {
  prescriptionDrugEvents: any;
}

export interface usePrescrionDrugEventDetailsProps {
  mdhFileId: string;
  submitterId: string;
  tenantId: string;
  sid: string;
  authType: string;
}

export interface usePrescrionDrugEventDetailsReturn {
  prescriptionDrugEventDetails: any;
}


export interface MddDetailRecord {
  drugCoverageStsCd: string;
  adjustCd: string | null;
  cmsAuditFlag: any;
  md2PartDModelInd: any;
  catastrophicCovCd: any;
  sbmOriginCd: string;
  nonStandardCd: string;
  pricingExceptionCd: string;
  hicn: string;
  tier: string;
  ingredientCost: string;
  dispFee: string;
  salesTax: string;
  pdePatPay: string;
  estRebateAtPos: number;
  gdcaAmount: string;
  gdcbAmount: string;
  otherTroopAmt: string;
  licsAmt: string;
  plroAmt: string;
  cppAmt: string;
  nppAmt: string;
  vaccineAdminFee: number;
  sbmPrescriberQl: any;
  sbmPrescriberId: any;
  cmsTransReportStatus: string;
  transReportStsDate: number;
  mddEditCount: number;
  edit01: any;
  edit02: any;
  edit03: any;
  edit04: any;
  edit05: any;
  edit06: any;
  edit07: any;
  edit08: any;
  edit09: any;
  edit10: any;
  exclusionRsnCd: any;
  resubCmstype: any;
  resubmissionSts: any;
  rsubmissionDate: any;
  resubTime: any;
  resubUser: any;
  reporocFileId: any;
  reporocSubId: any;
  reporocDate: any;
  reporocTime: any;
  reporocUser: any;
  brandGenCd: any;
  formularyCd: any;
  beginBenefitPhase: any;
  endBenefitPhase: any;
  dateOrigClaimRcvd: any;
  paidDate: any;
  totlGrossDrgCstAcc: any;
  othTroopamtInd: any;
  trueOopAccum: any;
  reportedGapDiscount: any;
  subDos: any;
  sbmQtyDisp: any;
  sbmDysSupply: any;
  sbmPscCd: any;
  sbmRxNumber: any;
  sbmFillNumber: any;
  adjBeginTimeStamp: any;
  nonPecosNpiInd: any;
  adjRsnCdQl: any;
  adjRsnCd: any;
  sbmSrvProvIdQl: any;
  sbmSrvProvId: any;
  sbmPharServiceType: any;
  patientResidence: any;
  scc: any;
  sbmCmpdCd: any;
  sbmProductId: any;
}

export interface MddResponseRecord {
  calcGapDiscount: number;
  pbpOfRecord: any;
  altSrvProvIdQl: any;
  altSrvProvId: any;
  origSbmContract: any;
  contractOfRecord: any;
  correctedHicn: any;
  patientGenderCd: string;
  dob: number;
  mddEditCount: number;
  edit01: any;
  edit02: any;
  edit03: any;
  edit04: any;
  edit05: any;
  edit06: any;
  edit07: any;
  edit08: any;
  edit09: any;
  edit10: any;
  exclusionRsnCd: any;
  resubmissionSts: string;
  rsubmissionDate: number;
  resubTime: number;
  resubUser: any;
  reporocFileId: any;
  reporocSubId: any;
  reporocDate: number;
  reporocTime: string;
  reporocUser: any;
}

export interface PrescriptionDrugEventDetailType {
  rxClaimNumber: string;
  claimSeqNbr: string;
  memberId: string;
  carrierId: string;
  accountId: string;
  groupId: string;
  mdhFileId: string;
  submitterId: string;
  pbpId: string;
  contractId: string;
  message: string;
  mddDetailRecord: MddDetailRecord;
  mddResponseRecord: MddResponseRecord;
}
==========

 src/prescription-drug-event/PrescriptionDrugEvent/prescription-drug-events.tsx(13,10): error TS2339: Property 'prescrionDrugEvents' does not exist on type '[{}, Dispatch<SetStateAction<{}>>]'.
       src/prescription-drug-event/PrescriptionDrugEvent/prescription-drug-events.tsx(13,31): error TS2339: Property 'setprescrionDrugEvents' does not exist on type '[{}, Dispatch<SetStateAction<{}>>]'.
       src/prescription-drug-event/PrescriptionDrugEvent/prescription-drug-events.tsx(27,11): error TS2322: Type '{ children: string; prescrionDrugEvents: any; }' is not assignable to type 'IntrinsicAttributes & { prescrionDrugEvents: any; }'.
         Property 'children' does not exist on type 'IntrinsicAttributes & { prescrionDrugEvents: any; }'.
       src/prescription-drug-event/usePrescriptionDrugEvent/use-prescription-drug-events.tsx(88,123): error TS2345: Argument of type '{}' is not assignable to parameter of type 'PrescriptionDrugEventDetailType | (() => PrescriptionDrugEventDetailType)'.
       
       
import React, {useEffect, useState} from 'react';

import {
  usePrescriptionDrugEvents
} from '../usePrescriptionDrugEvent/use-prescription-drug-events';

import {PrescriptionDrugEventProps} from './prescription-drug-events.types';

import {PrescriptionDrugEventsTable} from "./components/prescription-drug-events-table";

export function PrescriptionDrugEvents(params: PrescriptionDrugEventProps) {
  console.log('In PrescriptionDrugEvents', 'params=', params);
  const {prescrionDrugEvents, setprescrionDrugEvents} = useState({});




  useEffect(() => {

      setprescrionDrugEvents(usePrescriptionDrugEvents(params));
    console.log('In PrescriptionDrugEvents: in useEffect ', prescrionDrugEvents);
  }, [params]);
  return (
    <>
      {
        prescrionDrugEvents && prescrionDrugEvents?.medicarePartDMddFiles ?
        (<PrescriptionDrugEventsTable  prescrionDrugEvents = {prescrionDrugEvents.medicarePartDMddFiles}  > </PrescriptionDrugEventsTable>)
        :  (<div>No Prescription Drug Events Found</div>)
      }
    </>
);
}

export default PrescriptionDrugEvents;

============
import React, { useEffect, useState } from 'react';
import { getData } from "../../model/service/claimService";
import {
  PrescriptionDrugEventResponseType,
  usePrescrionDrugEventsProps,
} from "./use-prescription-drug-events.types";

export function usePrescriptionDrugEvents(request: usePrescrionDrugEventsProps) : any {
  console.log('In usePrescriptionDrugEvents', 'request=', request);

  const [prescriptionDrugEvents, setPrescriptionDrugEvents] = useState<PrescriptionDrugEventResponseType>({ rxClaimNbr: 0, rxSeqNbr: 0, message: '', medicarePartDMddFiles: []});
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    async function fetchData() {
      try {
        console.log('In usePrescriptionDrugEvent: request=', {rxClaimNbr: request.rxClaimNbr, rxSeq: request.rxSeq,  tenantId:  request.tenantId});
        const response = await getData(`/get-cms-pde?rxClaimNbr=${request.rxClaimNbr}&rxSeqNbr=${request.rxSeq}&tenantId=${request.tenantId}`,
          {sid: request.sid, 'auth-type': undefined});
        console.log('In usePrescriptionDrugEvent: messages', response.data);
        setPrescriptionDrugEvents(response.data);
        setLoading(false);
      } catch (error) {
        console.error('In usePrescriptionDrugEvent: Error fetching data:', error);
        setPrescriptionDrugEvents({
          'rxClaimNbr': 233062399615000,
          "rxSeqNbr": 999,
          "message": "successful",
          "medicarePartDMddFiles": []
        });
        setLoading(false);
      }
    }

    fetchData();
  }, [request]);

  console.log('In usePrescriptionDrugEvent: messages=', prescriptionDrugEvents);
  return {
    prescriptionDrugEvents,
    loading
  };
}


====

 File                Submitter    From      Thru        Create     Txn Report Resubmit    
   PD22154011  YASH1       6/03/22   6/03/22   6/03/22              


TO DISPlay in detail

                                                                             
RxClaim# 221533814768000   1       Member  SADKMED                            
Carrier  SADK         Account  SADKACCT            Group  SADKGRP             
File  PD22154011  Submitter ID  YASH1   PBP  001  Contract  A0707             
                                                                             
Drug Coverage Status Code       C      Non-Standard Code             P        
Adj/Del Code         CMS Audit         Pricing Exception Code        O        
Catastrophic Coverage Code             Original HICN     SADKMED120821        
Prescription Origin Code        0      Tier  7  Part D Model Indicator  07    
Cost              100.00  GDCA Amount          .00  PLRO Amount          .00  
Fee                 3.90  GDCB Amount       103.90  CPP Amount           .00  
Tax                  .00  Other TrOOP          .00  NPP Amount         83.90  
Patient Pay        20.00  LICS Amount          .00  Vac Admin            .00  
POS Rebates          .00    Prescriber:  Qualifier     ID                     
Transaction Report: Status                           Date                     
Edit: Count         Code                                                      
Exclusion Reason Code                                    Delete Request N     
Resubmission: Status             User                     Date                
Reprocessed:  File               Submitter ID             Date               +




RCMDD017   ENTER                 RxCLAIM (QA2)                         1/10/24
SADK                     Medicare Part D PDE Response                 13:15:25
                                                                             
RxClaim# 221533814768000   1       Member  SADKMED                            
Carrier  SADK         Account  SADKACCT            Group  SADKGRP             
File  PD22154011  Submitter ID  YASH1   PBP  001  Contract  A0707             
                                                                             
CMS Calc Gap Discount            .00     CMS Calc Mfg Discount           .00  
PBP of Record                            App Disc % Mfg Drg                   
Alt Serv Prov ID Qual                    App Disc % Mfg Drg LIS               
Alt Serv Prov ID                                                              
Org Submitting Contract                                                       
P2P Contract of Record                                                        
Corrected HICN                                                                
Patient Gender          M                                                     
Date of Birth                                                  
===
const prescriptionDetailLayout =  [
  {
    heading: 'MDD Detail Record',
    fields: [
      "mddDetailRecord.drugCoverageStsCd",
      "mddDetailRecord.adjustCd",
      "mddDetailRecord.cmsAuditFlag",
      "mddDetailRecord.md2PartDModelInd",
      "mddDetailRecord.catastrophicCovCd",
      "mddDetailRecord.sbmOriginCd",
      "mddDetailRecord.nonStandardCd",
      "mddDetailRecord.pricingExceptionCd",
      "mddDetailRecord.hicn",
      "mddDetailRecord.tier",
      "mddDetailRecord.ingredientCost",
      "mddDetailRecord.dispFee",
      "mddDetailRecord.salesTax",
      "mddDetailRecord.pdePatPay",
      "mddDetailRecord.estRebateAtPos",
      "mddDetailRecord.gdcaAmount",
      "mddDetailRecord.gdcbAmount",
      "mddDetailRecord.otherTroopAmt",
      "mddDetailRecord.licsAmt",
      "mddDetailRecord.plroAmt",
      "mddDetailRecord.cppAmt",
      "mddDetailRecord.nppAmt",
      "mddDetailRecord.vaccineAdminFee",
      "mddDetailRecord.sbmPrescriberQl",
      "mddDetailRecord.sbmPrescriberId",
      "mddDetailRecord.cmsTransReportStatus",
      "mddDetailRecord.transReportStsDate",
      "mddDetailRecord.mddEditCount",
      "mddDetailRecord.edit01",
      "mddDetailRecord.edit02",
      "mddDetailRecord.edit03",
      "mddDetailRecord.edit04",
      "mddDetailRecord.edit05",
      "mddDetailRecord.edit06",
      "mddDetailRecord.edit07",
      "mddDetailRecord.edit08",
      "mddDetailRecord.edit09",
      "mddDetailRecord.edit10",
      "mddDetailRecord.exclusionRsnCd",
      "mddDetailRecord.resubCmstype",
      "mddDetailRecord.resubmissionSts",
      "mddDetailRecord.rsubmissionDate",
      "mddDetailRecord.resubTime",
      "mddDetailRecord.resubUser",
      "mddDetailRecord.reporocFileId",
      "mddDetailRecord.reporocSubId",
      "mddDetailRecord.reporocDate",
      "mddDetailRecord.reporocTime",
      "mddDetailRecord.reporocUser",
      "mddDetailRecord.brandGenCd",
      "mddDetailRecord.formularyCd",
      "mddDetailRecord.beginBenefitPhase",
      "mddDetailRecord.mddDetailRecord.endBenefitPhase",
      "mddDetailRecord.dateOrigClaimRcvd",
      "mddDetailRecord.paidDate",
      "mddDetailRecord.totlGrossDrgCstAcc",
      "mddDetailRecord.othTroopamtInd",
      "mddDetailRecord.trueOopAccum",
      "mddDetailRecord.reportedGapDiscount",
      "mddDetailRecord.subDos",
      "mddDetailRecord.sbmQtyDisp",
      "mddDetailRecord.sbmDysSupply",
      "mddDetailRecord.sbmPscCd",
      "mddDetailRecord.sbmRxNumber",
      "mddDetailRecord.sbmFillNumber",
      "mddDetailRecord.adjBeginTimeStamp",
      "mddDetailRecord.nonPecosNpiInd",
      "mddDetailRecord.adjRsnCdQl",
      "mddDetailRecord.adjRsnCd",
      "mddDetailRecord.sbmSrvProvIdQl",
      "mddDetailRecord.sbmSrvProvId",
      "mddDetailRecord.sbmPharServiceType",
      "mddDetailRecord.patientResidence",
      "mddDetailRecord.scc",
      "mddDetailRecord.sbmCmpdCd",
      "mddDetailRecord.sbmProductId"
    ],
  },
  {
    heading: 'Response',
    fields: [
      "mddResponseRecord.calcGapDiscount",
      "mddResponseRecord.pbpOfRecord",
      "mddResponseRecord.altSrvProvIdQl",
      "mddResponseRecord.altSrvProvId",
      "mddResponseRecord.origSbmContract",
      "mddResponseRecord.contractOfRecord",
      "mddResponseRecord.correctedHicn",
      "mddResponseRecord.patientGenderCd",
      "mddResponseRecord.dob",
      "mddResponseRecord.mddEditCount",
      "mddResponseRecord.edit01",
      "mddResponseRecord.edit02",
      "mddResponseRecord.edit03",
      "mddResponseRecord.edit04",
      "mddResponseRecord.edit05",
      "mddResponseRecord.edit06",
      "mddResponseRecord.edit07",
      "mddResponseRecord.edit08",
      "mddResponseRecord.edit09",
      "mddResponseRecord.edit10",
      "mddResponseRecord.exclusionRsnCd",
      "mddResponseRecord.resubmissionSts",
      "mddResponseRecord.rsubmissionDate",
      "mddResponseRecord.resubTime",
      "mddResponseRecord.resubUser",
      "mddResponseRecord.reporocFileId",
      "mddResponseRecord.reporocSubId",
      "mddResponseRecord.reporocDate",
      "mddResponseRecord.reporocTime",
      "mddResponseRecord.reporocUser"
    ]
  }
];

=====


{
  "mddDetailRecord.drugCoverageStsCd": "Drug Coverage Status Code",
  "mddDetailRecord.adjustCd": "",
  "mddDetailRecord.cmsAuditFlag": "CMS Audit",
  "mddDetailRecord.md2PartDModelInd": "Part D Model Indicator",
  "mddDetailRecord.catastrophicCovCd": "Catastrophic Coverage Code",
  "mddDetailRecord.sbmOriginCd": "Prescription Origin Code",
  "mddDetailRecord.nonStandardCd": "Non-Standard Code",
  "mddDetailRecord.pricingExceptionCd": "Pricing Exception Code",
  "mddDetailRecord.hicn": "Original HICN",
  "mddDetailRecord.tier": "Tier",
  "mddDetailRecord.ingredientCost": "Cost",
  "mddDetailRecord.dispFee": "Fee",
  "mddDetailRecord.salesTax": "Tax",
  "mddDetailRecord.pdePatPay": "Patient Pay",
  "mddDetailRecord.estRebateAtPos": "",
  "mddDetailRecord.gdcaAmount": "GDCA Amount",
  "mddDetailRecord.gdcbAmount": "GDCB Amount",
  "mddDetailRecord.otherTroopAmt": "Other TrOOP",
  "mddDetailRecord.licsAmt": "LICS Amount",
  "mddDetailRecord.plroAmt": "PLRO Amount",
  "mddDetailRecord.cppAmt": "CPP Amount",
  "mddDetailRecord.nppAmt": "NPP Amount",
  "mddDetailRecord.vaccineAdminFee": "Vac Admin",
  "mddDetailRecord.sbmPrescriberQl": "Prescriber: Qualifier",
  "mddDetailRecord.sbmPrescriberId": "Prescriber: ID",
  "mddDetailRecord.cmsTransReportStatus": "Transaction Report: Status",
  "mddDetailRecord.transReportStsDate": "Transaction Report: Date",
  "mddDetailRecord.mddEditCount": "Edit: Count",
  "mddDetailRecord.edit01": "Edit 01",
  "mddDetailRecord.edit02": "Edit 02",
  "mddDetailRecord.edit03": "Edit 03",
  "mddDetailRecord.edit04": "Edit 04",
  "mddDetailRecord.edit05": "Edit 05",
  "mddDetailRecord.edit06": "Edit 06",
  "mddDetailRecord.edit07": "Edit 07",
  "mddDetailRecord.edit08": "Edit 08",
  "mddDetailRecord.edit09": "Edit 09",
  "mddDetailRecord.edit10": "Edit 10",
  "mddDetailRecord.exclusionRsnCd": "Exclusion Reason Code",
  "mddDetailRecord.resubCmstype": "Delete Request",
  "mddDetailRecord.resubmissionSts": "Resubmission: Status",
  "mddDetailRecord.rsubmissionDate": "Resubmission: Date",
  "mddDetailRecord.resubTime": "Resubmission: Time",
  "mddDetailRecord.resubUser": "Resubmission: User",
  "mddDetailRecord.reporocFileId": "Reprocessed: File",
  "mddDetailRecord.reporocSubId": "Reprocessed: Submitter ID",
  "mddDetailRecord.reporocDate": "Reprocessed: Date",
  "mddDetailRecord.reporocTime": "Reprocessed: Time",
  "mddDetailRecord.reporocUser": "Reprocessed: User",
  "mddDetailRecord.brandGenCd": "Brand Generic Code",
  "mddDetailRecord.formularyCd": "Formulary Code",
  "mddDetailRecord.beginBenefitPhase": "Begin Benefit Phase",
  "mddDetailRecord.mddDetailRecord.endBenefitPhase": "End Benefit Phase",
  "mddDetailRecord.dateOrigClaimRcvd": "Date Original Claim Received",
  "mddDetailRecord.paidDate": "Paid Date",
  "mddDetailRecord.totlGrossDrgCstAcc": "Total Gross Drug Cost Accumulator",
  "mddDetailRecord.othTroopamtInd": "Other TrOOP Amount Indicator",
  "mddDetailRecord.trueOopAccum": "True OOP Accumulator",
  "mddDetailRecord.reportedGapDiscount": "Reported Gap Discount",
  "mddDetailRecord.subDos": "Sub-Dos",
  "mddDetailRecord.sbmQtyDisp": "Quantity Dispensed",
  "mddDetailRecord.sbmDysSupply": "Days Supply",
  "mddDetailRecord.sbmPscCd": "PSC Code",
  "mddDetailRecord.sbmRxNumber": "Rx Number",
  "mddDetailRecord.sbmFillNumber": "Fill Number",
  "mddDetailRecord.adjBeginTimeStamp": "Adjustment Begin Time Stamp",
  "mddDetailRecord.nonPecosNpiInd": "Non-PECOS NPI Indicator",
  "mddDetailRecord.adjRsnCdQl": "Adjustment Reason Code Qualifier",
  "mddDetailRecord.adjRsnCd": "Adjustment Reason Code",
  "mddDetailRecord.sbmSrvProvIdQl": "Service Provider ID Qualifier",
  "mddDetailRecord.sbmSrvProvId": "Service Provider ID",
  "mddDetailRecord.sbmPharServiceType": "Pharmacy Service Type",
  "mddDetailRecord.patientResidence": "Patient Residence",
  "mddDetailRecord.scc": "SCC",
  "mddDetailRecord.sbmCmpdCd": "Compound Code",
  "mddDetailRecord.sbmProductId": "Product ID",
  "mddResponseRecord.calcGapDiscount": "CMS Calc Gap Discount",
  "mddResponseRecord.pbpOfRecord": "PBP of Record",
  "mddResponseRecord.altSrvProvIdQl": "Alt Service Provider ID Qualifier",
  "mddResponseRecord.altSrvProvId": "Alt Service Provider ID",
  "mddResponseRecord.origSbmContract": "Org Submitting Contract",
  "mddResponseRecord.contractOfRecord": "Contract of Record",
  "mddResponseRecord.correctedHicn": "Corrected HICN",
  "mddResponseRecord.patientGenderCd": "Patient Gender",
  "mddResponseRecord.dob": "Date of Birth"
}


====

 <TableContainer component={Paper}>
        <Table aria-label="collapsible table">
          <TableHead>
            <TableRow>
              <TableCell/>
              <TableCell>File</TableCell>
              <TableCell align="right">Submitter</TableCell>
              <TableCell align="right">From</TableCell>
              <TableCell align="right">Through</TableCell>
              <TableCell align="right">Created</TableCell>
              <TableCell align="right">Transaction report status</TableCell>
              <TableCell align="right">Resubmit status</TableCell>
              <TableCell align="right">Response</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {prescriptionDrugEvents.map((row) => (
              <Row key={row.mdhFileId}  row={row} detaiProps={getDetaiProps(row)}/>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

