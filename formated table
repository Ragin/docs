import React from 'react';
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Typography from '@mui/material/Typography';
import { styled } from '@mui/material/styles';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import TablePagination from '@mui/material/TablePagination';
import TableSortLabel from '@mui/material/TableSortLabel';
import { MedicationsTableProps } from './medications-table.types';
import { useTheme } from '@mui/material/styles';

export function MedicationsTable(props: MedicationsTableProps) {
  const { title, rows, headers } = props;

  const [order, setOrder] = React.useState<'asc' | 'desc'>('asc');
  const [orderBy, setOrderBy] = React.useState<keyof typeof rows[0] | ''>('');

  const handleRequestSort = (property: keyof typeof rows[0]) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const sortedRows = React.useMemo(() => {
    if (orderBy === '') {
      return rows;
    }
    return [...rows].sort((a, b) => {
      const valueA = a[orderBy];
      const valueB = b[orderBy];
      if (typeof valueA === 'string' && typeof valueB === 'string') {
        return order === 'asc' ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);
      } else {
        return order === 'asc' ? (valueA as number) - (valueB as number) : (valueB as number) - (valueA as number);
      }
    });
  }, [rows, orderBy, order]);

  const StyledTableCell = styled(TableCell)(({ theme }) => ({
    [`&.${tableCellClasses.head}`]: {
      backgroundColor: theme.palette.common.black,
      color: theme.palette.common.white,
      cursor: 'pointer',
    },
    [`&.${tableCellClasses.body}`]: {
      fontSize: 14,
    },
  }));

  const StyledTableRow = styled(TableRow)(({ theme }) => ({
    '&:nth-of-type(odd)': {
      backgroundColor: theme.palette.action.hover,
    },
    // hide last border
    '&:last-child td, &:last-child th': {
      border: 0,
    },
  }));

  const headersMap = (header: keyof typeof rows[0]) => (
    <StyledTableCell
      key={header}
      align="left"
      onClick={() => handleRequestSort(header)}
    >
      <TableSortLabel
        active={orderBy === header}
        direction={orderBy === header ? order : 'asc'}
      >
        {header}
      </TableSortLabel>
    </StyledTableCell>
  );

  const rowsMap = (row: typeof rows[0]) => (
    <StyledTableRow key={row.rxSeq}>
      <StyledTableCell>{row.memberId}</StyledTableCell>
      <StyledTableCell>{row.lastName}</StyledTableCell>
      <StyledTableCell>{row.firstName}</StyledTableCell>
      <StyledTableCell>{row.sbmDt}</StyledTableCell>
      <StyledTableCell>{row.rxNumber}</StyledTableCell>
      <StyledTableCell>{row.refillNumber}</StyledTableCell>
      <StyledTableCell>{row.claimStatus}</StyledTableCell>
      <StyledTableCell>{row.rxClaimNbr}</StyledTableCell>
      <StyledTableCell>{row.rxSeq}</StyledTableCell>
    </StyledTableRow>
  );

  return (
    <>
      <Typography variant="h2">{title}</Typography>
      <TableContainer component={Paper}>
        <Table sx={{ minWidth: 650 }} aria-label="simple table">
          <TableHead>
            <StyledTableRow>{headers.map(headersMap)}</StyledTableRow>
          </TableHead>
          <TableBody>
            {sortedRows
              ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
              .map(rowsMap)}
          </TableBody>
        </Table>
        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          component="div"
          count={rows.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={(_, newPage) => setPage(newPage)}
          onRowsPerPageChange={(event) => {
            setRowsPerPage(parseInt(event.target.value, 10));
            setPage(0);
          }}
        />
      </TableContainer>
    </>
  );
}

export default MedicationsTable;
