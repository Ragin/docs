To share context between routed pages in Next.js, you can use the `context` provider from the `react` package. Here's a simple example:

1. Create a context file, let's say `MyContext.js`:

```jsx
import { createContext, useContext, useState } from 'react';

const MyContext = createContext();

export const MyContextProvider = ({ children }) => {
  const [sharedValue, setSharedValue] = useState('Default Value');

  return (
    <MyContext.Provider value={{ sharedValue, setSharedValue }}>
      {children}
    </MyContext.Provider>
  );
};

export const useMyContext = () => {
  return useContext(MyContext);
};
```

2. Wrap your main `_app.js` file with the context provider:

```jsx
// pages/_app.js

import { MyContextProvider } from '../path/to/MyContext';

function MyApp({ Component, pageProps }) {
  return (
    <MyContextProvider>
      <Component {...pageProps} />
    </MyContextProvider>
  );
}

export default MyApp;
```

3. Now, you can use the context in your routed pages:

```jsx
// pages/Page1.js

import { useMyContext } from '../path/to/MyContext';

function Page1() {
  const { sharedValue, setSharedValue } = useMyContext();

  return (
    <div>
      <h1>Page 1</h1>
      <p>Shared Value: {sharedValue}</p>
      <button onClick={() => setSharedValue('Updated Value')}>Update Value</button>
    </div>
  );
}

export default Page1;
```

```jsx
// pages/Page2.js

import { useMyContext } from '../path/to/MyContext';

function Page2() {
  const { sharedValue } = useMyContext();

  return (
    <div>
      <h1>Page 2</h1>
      <p>Shared Value: {sharedValue}</p>
    </div>
  );
}

export default Page2;
```

Now, the `sharedValue` is accessible across your routed pages. Make sure to import and use the `MyContextProvider` in any new pages where you want to share the context.



====
home.tsx


import React, {useState} from 'react';
import Script from 'next/script';
import {Typography} from '@mui/material';
import { ROUTE_EVENT, ANALYTICS_EVENT} from '@optum-rx-claim-modern/claims';

import betteruiToken from "../theme/betterui.json";
import {createUniversalTheme, OptumTokens} from "@skyline/themes";
import {useRouter} from "next/router"
import {GlobalContextProvider, useGlobalContext} from "./GlobalContext";


export default function Home() {
  const { sharedContext, setSharedContext } = useGlobalContext();
  const [viewName, setViewName] = useState<string>('claimsSearch');
  const [viewHistory] = useState<string[]>(['claimsSearch']);
  // const betterUi = createUniversalTheme(betteruiToken, 'betterUi');
  // const {claimsRef} = useNextJsTest();




  console.log('OptumTokens=', OptumTokens);
  // const betterUi = createUniversalTheme(betteruiToken, 'betterUi');
  // const {claimsRef} = useNextJsTest();
  const ref = React.useRef<HTMLDivElement>();
  const router = useRouter();
  const context = JSON.stringify({sid: '7c88c67b2140ade7154b0d846740cd358eab23a1', authtype: 'msid'});
  let newContext = JSON.stringify(context);
  const [claimContext, setClaimContext] = useState<string>(newContext);

  const handleEvent = ((e: CustomEvent<any>) => {
    console.log('handleEvent');
    const {detail} = e;

    // eslint-disable-next-line default-case
    switch (detail.type) {
      case ROUTE_EVENT.TYPE: {

        console.log('In Page: detail=', detail);
        newContext = JSON.stringify({...context, searchDetailParam: detail.payload.searchDetailParam});
        console.log('In Page: newContext=', newContext);
        setClaimContext(newContext);
        setSharedContext(newContext);
        if (detail.payload.viewName) {
          viewHistory.push(detail.payload.viewName);
          setViewName(detail.payload.viewName);
          router.push(`claims-details/${detail.payload.viewName}`);
        }

        break;
      }

      case ANALYTICS_EVENT.TYPE:
        if (window.trackAnalytics) {
          window.trackAnalytics(detail.payload);
        }
    }
  }) as EventListener;


  React.useEffect(() => {
    console.log('ref', ref);
    ref.current?.addEventListener('event', handleEvent);
    return () => {
      ref.current?.removeEventListener('event', handleEvent);
    };
  }, [ref.current]);

  return (
    <main>
      <Script src="http://localhost:4173/claims-webcomponent.es.js" strategy="afterInteractive" />
      <GlobalContextProvider>
        <claims-micro-product ref={ref} text="Claims"  view="claimsSearch"  context={context} theme="OptumDefault" ></claims-micro-product>
      </GlobalContextProvider>

    </main>
  );
}

===GlobalContext.tsx

import { createContext, useContext, useState } from 'react';

const GlobalContext = createContext({});

export const GlobalContextProvider = ({ children }) => {
  const [sharedContext, setSharedContext] = useState({});

  return (
    <GlobalContext.Provider value={{sharedContext, setSharedContext }}>
      {children}
    </GlobalContext.Provider>
  );
};

export const useGlobalContext = () => {
  return useContext(GlobalContext);
};


