====claims.tsx====
  import React, { forwardRef, useRef } from 'react';
import Grid from '@mui/material/Grid';
import Typography from '@mui/material/Typography';
import { MedicationsTable } from '../medications-table/MedicationsTable/medications-table';
import { ClaimsProps } from './claims.types';
import { Button, TextField } from "@mui/material";
import { useMedicationsTable } from '../medications-table/useMedicationsTable/use-medications-table';
import {SearchRecord} from "../medications-table/useMedicationsTable/use-medications-table.types";

export const Claims = forwardRef((props: ClaimsProps, ref: React.Ref<HTMLDivElement>) => {
  const { text, context } = props;
  console.log('Claims before useMedicationsTable context  = ', context);
  const contextObj =  JSON.parse(context);
  const { setSearchState, rows, headers } = useMedicationsTable({sid: contextObj.sid});

  const memberIdRef = useRef<HTMLInputElement | null>(null);
  const fillDtFromRef = useRef<HTMLInputElement | null>(null);
  const fillDtThruRef = useRef<HTMLInputElement | null>(null);
  const tenantIdRef = useRef<HTMLInputElement | null>(null);

  const handleSearchClick = () => {
    console.log('hearders=', headers);
    // console.log('fillDtFromRef=', fillDtFromRef, 'fillDtFromRef.current?.value?.replace(\'-\', \'\')=', fillDtFromRef.current?.value?.replaceAll('-', ''));
    const fromDt: any = fillDtFromRef.current?.value?.split('-').join('');
    const thruDt: any = fillDtThruRef.current?.value?.split('-').join('');
    const newSearchState: SearchRecord = {
      memberId: memberIdRef.current?.value,
      fillDtFrom: fillDtFromRef.current?.value ? Number(fromDt) : undefined,
      fillDtThru: fillDtThruRef.current?.value ?  Number(thruDt) : undefined,
      tenantId: tenantIdRef.current?.value
    };
    console.log('in claims rows =', rows);
    console.log('newSearchState=', newSearchState);
    if(memberIdRef.current?.value && fillDtFromRef.current?.value && fillDtThruRef.current?.value && tenantIdRef.current){
      setSearchState({...newSearchState});
    } else {
      console.log(' please enter all search parametes before search');
    }



    // reloadTable();
  };

  return (
  <Grid container ref={ref} spacing={2}>
    <Grid item xs={12}>
      <Typography variant="h2">{text}-Search</Typography>
    </Grid>
    <Grid item xs={12} container spacing={2}>
      <Grid item xs={3}>
        <TextField label="Member ID" fullWidth inputRef={memberIdRef} />
      </Grid>
      <Grid item xs={3}>
        <TextField label="Fill Date From" fullWidth type="date" inputRef={fillDtFromRef} />
      </Grid>
      <Grid item xs={3}>
        <TextField label="Fill Date Thru" fullWidth type="date" inputRef={fillDtThruRef} />
      </Grid>
      <Grid item xs={3}>
        <TextField label="Tenant ID" fullWidth inputRef={tenantIdRef} />
      </Grid>
    </Grid>
    <Grid item xs={12}>
      <Button onClick={handleSearchClick} variant="contained" color="primary">
        Search
      </Button>
    </Grid>
    <Grid item xs={12}>
      <MedicationsTable title="Claim Result" rows={rows} headers={headers} />
    </Grid>
  </Grid>
  );
});

export default Claims;
===end===

  ===claims.types.ts ====
  import {UseClaimsReturn} from '../useClaims/use-claims.types';

export interface ClaimsProps extends UseClaimsReturn {
  context: string;
  text: string;
}

===end====

  ===medication-table.tsx===
  import React from 'react';
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import {Typography, Link} from '@mui/material';
import { styled } from '@mui/material/styles';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import TablePagination from '@mui/material/TablePagination';
import TableSortLabel from '@mui/material/TableSortLabel';
import { MedicationsTableProps } from './medications-table.types';
import {ClaimsRecord} from "../useMedicationsTable/use-medications-table.types";
import { useHistory } from 'react-router-dom';

export function MedicationsTable(props: MedicationsTableProps) {
  const { title, rows, headers } = props;
  const [order, setOrder] = React.useState<'asc' | 'desc'>('asc');
  const [orderBy, setOrderBy] = React.useState<keyof typeof rows[0] | ''>('');
  const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(5);

  const handleRequestSort = (property: keyof typeof rows[0]) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const sortedRows = React.useMemo(() => {
    console.log('orderBy, order=', orderBy, ',', order);
    if (orderBy === '') {
      return rows;
    }
    setPage(0);
    console.log('orderBy not empty')
    const orderByColName: any = headers.filter(col => col.code === orderBy)[0]?.code;
    if(!orderByColName){
      return rows;
    }
    const x = [...rows].sort((a, b) => {
      const valueA = a[orderByColName as keyof  ClaimsRecord];
      const valueB = b[orderByColName as keyof  ClaimsRecord];
      if (typeof valueA === 'string' && typeof valueB === 'string') {
        return order === 'asc' ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);
      } else {
        return order === 'asc' ? (valueA as number) - (valueB as number) : (valueB as number) - (valueA as number);
      }
    });
    console.log('sorted=', x);
    return x;
  }, [rows, orderBy, order]);

  const StyledTableCell = styled(TableCell)(({ theme }) => ({
    [`&.${tableCellClasses.head}`]: {
      backgroundColor: theme.palette.common.white,
      color: theme.palette.common.black,
      cursor: 'pointer',
    },
    [`&.${tableCellClasses.body}`]: {
      fontSize: 14,
    },
  }));

  const StyledTableRow = styled(TableRow)(({ theme }) => ({
    '&:nth-of-type(odd)': {
      backgroundColor: theme.palette.action.hover,
    },
    // hide last border
    '&:last-child td, &:last-child th': {
      border: 0,
    },
  }));

  const headersMap = (header: any) => {
    console.log('header=', header);
    return (
      <StyledTableCell
        key={header?.code}
        align="left"
        onClick={() => handleRequestSort(header?.code)}
      >
        <TableSortLabel
          active={orderBy === header?.code}
          direction={orderBy === header?.code ? order : 'asc'}
        >
          {header?.label}
        </TableSortLabel>
      </StyledTableCell>
    );
  };

  const rowsMap = (row: typeof rows[0]) =>{
    console.log('row rendered', row);
    return (
      <StyledTableRow>
        <StyledTableCell>{row.memberId}</StyledTableCell>
        <StyledTableCell>{row.lastName}</StyledTableCell>
        <StyledTableCell>{row.firstName}</StyledTableCell>
        <StyledTableCell>{row.sbmDt}</StyledTableCell>
        <StyledTableCell>{row.rxNumber}</StyledTableCell>
        <StyledTableCell>{row.refillNumber}</StyledTableCell>
        <StyledTableCell>{row.claimStatus}</StyledTableCell>
        <StyledTableCell>{row.rxClaimNbr}</StyledTableCell>

        <StyledTableCell>{row.rxSeq}</StyledTableCell>
        <StyledTableCell>
          <Link
            onClick={() => history.push(`/claims/${row.rxSeq}`)}
            className="account-table-link"
            id={`account-details-link-${row.rxSeq}`}
          >
            {row.rxSeq}
          </Link>
        </StyledTableCell>
      </StyledTableRow>
    );
  };

  return (
    <>
      <Typography variant="h2">{title}</Typography>
      <TableContainer component={Paper}>
        <Table sx={{ minWidth: 650 }} aria-label="simple table">
          <TableHead>
            <StyledTableRow>{headers?.map(headersMap)}</StyledTableRow>
          </TableHead>
          <TableBody>
            {sortedRows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(rowsMap)}
          </TableBody>
        </Table>
        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          component="div"
          count={rows.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={(_, newPage) => setPage(newPage)}
          onRowsPerPageChange={(event) => {
            setRowsPerPage(parseInt(event.target.value, 10));
            setPage(0);
          }}
        />
      </TableContainer>
    </>
  );
}

export default MedicationsTable;
=====end===
===use-medications-table.tsx====
import { useEffect, useState } from 'react';
import {ClaimsRecord, Column, SearchRecord} from './use-medications-table.types';
import { getData } from '../../model/service/claimService';



interface UseMedicationsTableResult {
  headers: Column[];
  reloadTable: () => void;
  setSearchState: (value: any) => void;
  loading: boolean;
  rows: Array<ClaimsRecord>;
}

export function useMedicationsTable(context: any): UseMedicationsTableResult {
  console.log('in useMedicationsTable context =', context);
  const headers = [
    {label:'Member ID', code: 'memberId'},
    {label:'Last Name', code: 'lastName'},
    {label:'First Name', code: 'firstName'},
    {label:'Fill Date', code: 'sbmDt'},
    {label:'Rx Number', code: 'rxNumber'},
    {label:'Refill Number', code: 'refillNumber'},
    {label:'Claim Status', code: 'claimStatus'},
    {label:'RX Claim Number', code: 'rxClaimNbr'},
    {label:'Seq Nbr', code: 'rxSeq'}];
  const [rows, setRows] = useState<Array<ClaimsRecord>>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [searchState, setSearchState] = useState<SearchRecord>({
    fillDtFrom: 0,
    fillDtThru: 0,
    memberId: "",
    tenantId: ""
  });
  const fetchData = async () => {

    try {
      console.log('searchState=', searchState)
      const response = await getData('/search', {sid: context.sid, authtype: context.authtype}, searchState);
      const data = response?.data?.memberSrchInfoResp ? response?.data?.memberSrchInfoResp : [];
      console.log(data);
      setRows([...data]);
      setLoading(false);
      return data;
    } catch (error) {
      console.error('Error fetching data:', error);
      setLoading(false);
    }
    return [];
  };

  useEffect(() => {
    fetchData();
  }, [searchState]);

  return {
    headers,
    loading,
    rows,
    setSearchState,
    reloadTable: () => {
      setSearchState((searchState) => ({...searchState}))
    }
  };
}

export default useMedicationsTable;
===end==

===use-claims.tsx===
import {useClickLink} from '../useClickLink/use-click-link';

import {UseClaimsProps, UseClaimsReturn} from './use-claims.types';

export function useClaims(props: UseClaimsProps): UseClaimsReturn {
  const {ref} = props;
  const {onClickLink} = useClickLink({ref});

  return {
    onClickLink
  };
}



export default useClaims;
===end===

==use-clicl-link.tsx==
import React from 'react';

import {useRouteEvent} from '../useRouteEvent/use-route-event';
import {useAnalyticsEvent} from '../useAnalyticsEvent/use-analytics-event';

import {UseClickLinkProps, UseClickLinkReturn} from './use-click-link.types';

export function useClickLink(props: UseClickLinkProps): UseClickLinkReturn {
  const {ref} = props;

  const {dispatchRouteEvent} = useRouteEvent({ref});
  const {dispatchAnalyticsEvent} = useAnalyticsEvent({ref});

  function onClickLink(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {
    e.preventDefault();
    e.stopPropagation();

    const {
      currentTarget: {href, dataset}
    } = e;

    dispatchRouteEvent({href});
    dispatchAnalyticsEvent({category: dataset['analytics-category'] as string});
  }

  return {
    onClickLink
  };
}

export default useClickLink;
===end===

==use-routing-envent.tsx===
import {getEvent} from '../events/events';

import {ROUTE_EVENT, RouteEventPayload, UseRouteEventProps, UseRouteEventReturn} from './use-route-event.types';

export function useRouteEvent(props: UseRouteEventProps): UseRouteEventReturn {
  const {ref} = props;

  return {
    dispatchRouteEvent: (payload: RouteEventPayload) => {
      if (ref && ref.current) {
        ref.current.dispatchEvent(getEvent({type: ROUTE_EVENT.TYPE, payload}));
      }
    }
  };
}

export default useRouteEvent;
==end===
===index.ts==
export * from './Claims/claims';
export * from './Claims/claims.types';

export * from './useClaims/use-claims';
export * from './useClaims/use-claims.types';
/*export * from '../src/model/store';
export * from '../src/model/reducers';*/

export * from './events/events';
export * from './events/events.types';

export * from './useRouteEvent/use-route-event';
export * from './useRouteEvent/use-route-event.types';

export * from './useAnalyticsEvent/use-analytics-event';
export * from './useAnalyticsEvent/use-analytics-event.types';

export * from './useClickLink/use-click-link';
export * from './useClickLink/use-click-link.types';
export * from './medications-table/MedicationsTable/medications-table';
export * from './medications-table/MedicationsTable/medications-table.types';

export * from './medications-table/useMedicationsTable/use-medications-table';
export * from './medications-table/useMedicationsTable/use-medications-table.types';

===end==

==claimService.ts===
import axios, { AxiosError } from 'axios';
import {getBasePath} from "./commonService";


export function getData(feature: string, headers: any, userSelectedValues: any): Promise<any> {
  const basePath = getBasePath();

  const url = `${basePath}${feature}`;

  const config = {
    headers,
  };
  console.log('in getData config=', config, ' url=', url);
  const requestData = {
    ...userSelectedValues,
  };

  return new Promise((resolve, reject) => {
    axios.post<{ data: any }>(url, requestData, config)
      .then((response) => {
        resolve(response);
      })
      .catch((error: AxiosError) => {
        if (error.response) {
          console.error('Server responded with an error status:', error.response.status);
          console.error('Response data:', error.response.data);
          reject(error.response);
        } else if (error.request) {
          console.error('No response received from the server.');
          reject(error.request);
        } else {
          console.error('Error setting up the request:', error.message);
          reject(error.message);
        }
      });
  });
}

===end===
==package.json===
{
  "name": "@optum-rx-claim-modern/claims",
  "version": "0.1.0-next.13",
  "description": "This is a micro-product to show the features of rx claims.",
  "repository": "https://github.com/optum-rx-pbm/rxclaim-lite-ui",
  "license": "UNLICENSED",
  "sideEffects": false,
  "config": {
    "artifactory": {
      "release": true
    },
    "webcomponent": {
      "release": false
    }
  },
  "scripts": {
    "build": "tsc --project tsconfig.json",
    "prepack": "yarn build"
  },
  "main": "src/index",
  "files": [
    "tsconfig.json",
    "*.js",
    "*.js.map",
    "*.d.ts",
    "**/*.js",
    "**/*.js.map",
    "**/*.d.ts"
  ],
  "devDependencies": {
    "@jest/globals": "^27.2.1",
    "@storybook/react": "^7.0.8",
    "@testing-library/react": "^13.4.0",
    "@testing-library/react-hooks": "^8.0.1",
    "@types/react": "^18.0.25",
    "@types/react-redux": "^7.1.16",
    "eslint": "^8.28.0",
    "jest": "^27.2.1",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.8.8",
    "react-dom": "^18.2.0",
    "ts-jest": "^27.0.5",
    "typescript": "^5.1.3"
  },
  "peerDependencies": {
    "@mui/material": "^5.10.0",
    "react": "^17.0.0 || ^18.0.0",
    "react-dom": "^17.0.0 || ^18.0.0"
  },
  "dependencies": {
    "@reduxjs/toolkit": "^1.9.7",
    "@skyline/analytics-provider": "^1.27.45",
    "@skyline/core-hooks": "^0.1.33",
    "axios": "^0.21.4",
    "react-redux": "^7.2.4",
    "react-scripts": "4.0.3",
    "redux": "^4.1.0",
    "redux-thunk": "^2.3.0",
    "tslib": "^2.3.1"
  },
  "stableVersion": "0.1.0"
}
implement routing

To implement navigation on click in the table to route to a different component, you can follow these steps:

1. **Define Routes:**
   Ensure you have defined routes for the components you want to navigate to. This typically involves setting up routes in your application's routing configuration. If you're using React Router, you might have a `<BrowserRouter>` or `<HashRouter>` in your main `index.tsx` file.

   ```jsx
   // Example using React Router
   import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
   import Claims from './Claims/claims';
   import OtherComponent from './OtherComponent/other-component';

   const App = () => (
     <Router>
       <Switch>
         <Route path="/claims" component={Claims} />
         <Route path="/other" component={OtherComponent} />
         {/* Add more routes as needed */}
       </Switch>
     </Router>
   );

   // Render your App component
   ```

2. **Update the Link in `MedicationsTable` Component:**
   In your `MedicationsTable` component, update the `Link` component to use the appropriate route for each row. Modify the `rowsMap` function to include the correct link for each row.

   ```jsx
   const rowsMap = (row: typeof rows[0]) => {
     console.log('row rendered', row);
     return (
       <StyledTableRow key={row.rxSeq}>
         {/* ... other cells */}
         <StyledTableCell>
           <Link
             to={`/claims/${row.rxSeq}`} // Update the link based on your route structure
             className="account-table-link"
             id={`account-details-link-${row.rxSeq}`}
           >
             {row.rxSeq}
           </Link>
         </StyledTableCell>
       </StyledTableRow>
     );
   };
   ```

3. **Handle Navigation in the Component:**
   If you want to navigate programmatically within your component, you can use the `useHistory` hook from React Router. Import it at the beginning of your `MedicationsTable` component.

   ```jsx
   import { useHistory } from 'react-router-dom';

   export function MedicationsTable(props: MedicationsTableProps) {
     const history = useHistory();

     // ... rest of the component

     const rowsMap = (row: typeof rows[0]) => {
       console.log('row rendered', row);
       return (
         <StyledTableRow key={row.rxSeq}>
           {/* ... other cells */}
           <StyledTableCell>
             <Link
               onClick={() => history.push(`/claims/${row.rxSeq}`)}
               className="account-table-link"
               id={`account-details-link-${row.rxSeq}`}
             >
               {row.rxSeq}
             </Link>
           </StyledTableCell>
         </StyledTableRow>
       );
     };

     // ... rest of the component
   }
   ```

Now, when a user clicks on a link in the table, it will navigate to the specified route, either using the `<Link>` component or programmatically with the `history.push` method. Adjust the routes and link structure according to your application's needs.
