// src/TableComponent.js
import React, { useEffect } from 'react';
import { fetchData } from './actions';
import { Container, Grid, Paper, Typography } from '@mui/material';
import { connect } from 'react-redux';

function TableComponent({ data, error, fetchData }) {
  useEffect(() => {
    fetchData();
  }, [fetchData]);

  return (
    <Container maxWidth="lg">
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Paper elevation={3}>
            <Typography variant="h4" component="div">
              Table Data
            </Typography>
          </Paper>
        </Grid>
        <Grid item xs={12}>
          {error ? (
            <Typography variant="body1" color="error">
              Error: {error}
            </Typography>
          ) : (
            <Paper elevation={3}>
              <table>
                <thead>
                  <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                  </tr>
                </thead>
                <tbody>
                  {data.map((item, index) => (
                    <tr key={index}>
                      <td>{item.firstname}</td>
                      <td>{item.lastname}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </Paper>
          )}
        </Grid>
      </Grid>
    </Container>
  );
}

const mapStateToProps = (state) => ({
  data: state.data,
  error: state.error,
});

const mapDispatchToProps = {
  fetchData,
};

export default connect(mapStateToProps, mapDispatchToProps)(TableComponent);






===next file

// src/actions.js
import { setData, setError } from './redux';

// Async action to fetch data from the API
export const fetchData = () => {
  return async (dispatch) => {
    try {
      const response = await fetch('/test/data');
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      dispatch(setData(data));
    } catch (error) {
      dispatch(setError(error.message));
    }
  };
};

// next file

// src/redux.js
import { createSlice, configureStore } from '@reduxjs/toolkit';

const initialState = {
  data: [],
  error: null,
};

const rootReducer = createSlice({
  name: 'root',
  initialState,
  reducers: {
    setData: (state, action) => {
      state.data = action.payload;
    },
    setError: (state, action) => {
      state.error = action.payload;
    },
  },
});

const store = configureStore({
  reducer: rootReducer.reducer,
});

export default store;


---- next file
package.json
{
  "name": "table-from-url",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@mui/material": "^5.2.2",
    "@mui/icons-material": "^5.2.1",
    "axios": "^0.24.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-redux": "^7.2.6",
    "react-scripts": "4.0.3",
    "redux": "^4.1.1",
    "web-vitals": "^1.1.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


--- proxy.config.ts


const { createProxyMiddleware } = require('http-proxy-middleware');

module.exports = function (app) {
  app.use(
    '/test/data', // Define the API endpoint you want to proxy
    createProxyMiddleware({
      target: 'http://localhost:3001', // Replace with your local server's address
      changeOrigin: true,
    })
  );
};



