  @PostMapping(value = "/search")
    public MemberSearchResp search(@RequestBody MemberSearchRq mbrRequest, @RequestHeader HttpHeaders headers) {

        if (!securityDisabled) {
            List<String> sId = (headers.get("sid"));
            String authType = "msid";
            String sessionId = sId.get(0);
            String moduleName = ((mbrRequest.getTenantId()));
            Map<String, String> columnFieldNameMapping = new HashMap<>();
            columnFieldNameMapping.put("CARRIER", "TCD_CARRIER_ID");

            // UserInfo userInfo = authUserRoleService.fetchUserRoleFromPortunus(sessionId, authType, moduleName);
            // userInfo.setAllAbilities(userInfo.getAbilities().getAllAbilities());
            UserInfo userInfo = new UserInfo();
            DACRoles roles = authUserRoleService.fetchDGRoles(sessionId, authType);
            userInfo.setDgRoles(roles.getRoles());
            clause = dacLibraryService.cagClause(moduleName, userInfo.getDgRoles(), columnFieldNameMapping,
                    sessionId, authType);
        }

        MemberSearchResp response = claimService.searchMbrClaims(mbrRequest, clause);
        return response;
    }
==
public class MemberSearchRq {
    private String memberId;
    private Long fillDtFrom;
    private Long fillDtThru;
    private String tenantId;

    public String getMemberId() {
        return memberId;
    }

    public void setMemberId(String memberId) {
        this.memberId = memberId;
    }

    public Long getFillDtFrom() {
        return fillDtFrom;
    }

    public void setFillDtFrom(Long fillDtFrom) {
        this.fillDtFrom = fillDtFrom;
    }

    public String getTenantId() {
        return tenantId;
    }

    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    public Long getFillDtThru() {
        return fillDtThru;
    }

    public void setFillDtThru(Long fillDtThru) {
        this.fillDtThru = fillDtThru;
    }
}
==

@GetMapping(value = "/search")
    public MemberSearchResp search(@RequestParam String memberId,
                                   @RequestParam Long fillDtFrom,
                                   @RequestParam Long fillDtThru,
                                   @RequestParam String tenantId,
                                   @RequestHeader HttpHeaders headers) {

        // Your existing logic for security checks and processing headers
        if (!securityDisabled) {
            List<String> sId = headers.get("sid");
            String authType = "msid";
            String sessionId = sId.get(0);
            String moduleName = tenantId;
            Map<String, String> columnFieldNameMapping = new HashMap<>();
            columnFieldNameMapping.put("CARRIER", "TCD_CARRIER_ID");

            // UserInfo userInfo = authUserRoleService.fetchUserRoleFromPortunus(sessionId, authType, moduleName);
            // userInfo.setAllAbilities(userInfo.getAbilities().getAllAbilities());
            UserInfo userInfo = new UserInfo();
            DACRoles roles = authUserRoleService.fetchDGRoles(sessionId, authType);
            userInfo.setDgRoles(roles.getRoles());
            clause = dacLibraryService.cagClause(moduleName, userInfo.getDgRoles(), columnFieldNameMapping,
                    sessionId, authType);
        }

        // Creating MemberSearchRq object
        MemberSearchRq mbrRequest = new MemberSearchRq();
        mbrRequest.setMemberId(memberId);
        mbrRequest.setFillDtFrom(fillDtFrom);
        mbrRequest.setFillDtThru(fillDtThru);
        mbrRequest.setTenantId(tenantId);

        // Call the service method with the converted parameters
        MemberSearchResp response = claimService.searchMbrClaims(mbrRequest, clause);
        return response;
    }
