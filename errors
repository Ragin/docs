  <Button   data-viewName="claimsSearch"  onClick={onClickLink} sx={{ py: '20px'}}> Back</Button>
Error: src/claims-details/ClaimsDetails/claims-details.tsx(77,15): error TS2769: No overload matches this call.
  Overload 1 of 3, '(props: { href: string; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<Omit<DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & { ...; }, "style" | ... 24 more ... | "startIcon">): Element', gave the following error.
    Property 'href' is missing in type '{ children: string; "data-viewName": string; onClick: (e: MouseEvent<HTMLAnchorElement, MouseEvent>) => void; sx: { py: string; }; }' but required in type '{ href: string; }'.
Overload 2 of 3, '(props: { component: ElementType<any>; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: string; "data-viewName": string; onClick: (e: MouseEvent<HTMLAnchorElement, MouseEvent>) => void; sx: { py: string; }; }' but required in type '{ component: ElementType<any>; }'.
Overload 3 of 3, '(props: DefaultComponentProps<ExtendButtonBaseTypeMap<ButtonTypeMap<{}, "button">>>): Element | null', gave the following error.
    Type '(e: MouseEvent<HTMLAnchorElement, MouseEvent>) => void' is not assignable to type 'MouseEventHandler<HTMLButtonElement>'.
      Types of parameters 'e' and 'event' are incompatible.
        Type 'MouseEvent<HTMLButtonElement, MouseEvent>' is not assignable to type 'MouseEvent<HTMLAnchorElement, MouseEvent>'.
          Type 'HTMLButtonElement' is missing the following properties from type 'HTMLAnchorElement': charset, coords, download, hreflang, and 19 more.

Error: src/claims-details/ClaimsDetails/header-component.tsx(9,28): error TS7031: Binding element 'data' implicitly has an 'any' type.
Error: src/claims-details/ClaimsDetails/header-component.tsx(9,34): error TS7031: Binding element 'labels' implicitly has an 'any' type.
Error: src/claims-details/ClaimsDetails/header-component.tsx(9,42): error TS7031: Binding element 'layout' implicitly has an 'any' type.
Error: src/claims-details/ClaimsDetails/header-component.tsx(12,20): error TS7006: Parameter 'group' implicitly has an 'any' type.
Error: src/claims-details/ClaimsDetails/header-component.tsx(12,27): error TS7006: Parameter 'index' implicitly has an 'any' type.
Error: src/claims-details/ClaimsDetails/header-component.tsx(19,34): error TS7006: Parameter 'field' implicitly has an 'any' type.
Error: src/claims-search/ClaimsSearch/claims-search.tsx(56,41): error TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.
  Type 'null' is not assignable to type 'string'.
Error: src/claims-search/ClaimsSearch/claims-search.tsx(142,11): error TS2769: No overload matches this call.
  Overload 1 of 3, '(props: { href: string; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<Omit<DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & { ...; }, "style" | ... 24 more ... | "startIcon">): Element', gave the following error.
    Type '{ children: string; pt: string; onClick: (e: any) => void; variant: "contained"; color: "primary"; }' is not assignable to type 'IntrinsicAttributes & { href: string; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>'.
      Property 'pt' does not exist on type 'IntrinsicAttributes & { href: string; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>'.
  Overload 2 of 3, '(props: { component: ElementType<any>; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>): Element | null', gave the following error.
    Property 'component' is missing in type '{ children: string; pt: string; onClick: (e: any) => void; variant: "contained"; color: "primary"; }' but required in type '{ component: ElementType<any>; }'.
  Overload 3 of 3, '(props: DefaultComponentProps<ExtendButtonBaseTypeMap<ButtonTypeMap<{}, "button">>>): Element | null', gave the following error.
    Type '{ children: string; pt: string; onClick: (e: any) => void; variant: "contained"; color: "primary"; }' is not assignable to type 'IntrinsicAttributes & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>'.
      Property 'pt' does not exist on type 'IntrinsicAttributes & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>'.
Error: src/useClickLink/use-click-link.tsx(23,46): error TS7053: Element implicitly has an 'any' type because expression of type '"dataset"' can't be used to index type 'EventTarget'.
  Property 'dataset' does not exist on type 'EventTarget'.
Error: src/useClickLink/use-click-link.tsx(28,17): error TS7053: Element implicitly has an 'any' type because expression of type '"dataset"' can't be used to index type 'EventTarget'.
  Property 'dataset' does not exist on type 'EventTarget'.
lerna ERR! lifecycle "prepack" errored in "@optum-rx-claim-modern/claims", exiting 2
Error: Process completed with exit code 2.



====
import React from 'react';
import { Grid, Card, CardContent, Typography } from '@mui/material';

const labelStyle = {
  fontWeight: 'bold',
  color: '#3F51B5',
};

const HeaderComponent = ({ data, labels, layout }) => {
  return (
    <div>
      {layout.map((group, index) => (
        <Card key={index} elevation={3} style={{ marginBottom: '20px' }}>
          <CardContent>
            <Typography variant="h6" style={{ marginBottom: '10px' }}>
              {group.heading}
            </Typography>
            <Grid container spacing={2}>
              {group.fields.map((field) => (
                <Grid key={field} item xs={12} sm={6} md={4}>
                  <div style={{ marginBottom: '15px' }}>
                    <Typography variant="subtitle1" style={labelStyle}>
                      {labels[field]}
                    </Typography>
                    <Typography variant="body1">{data[field]}</Typography>
                  </div>
                </Grid>
              ))}
            </Grid>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

export default HeaderComponent;
==
import React, {forwardRef, useContext, useEffect, useState} from 'react';
import Grid from '@mui/material/Grid';
import Typography from '@mui/material/Typography';
import { MedicationsTable } from '../../medications-table/MedicationsTable/medications-table';
import { ClaimsSearchProps } from './claims-search.types';
import {Button, TextField} from "@mui/material";
import { useMedicationsTable } from '../../medications-table/useMedicationsTable/use-medications-table';
import {SearchRecord} from "../../medications-table/useMedicationsTable/use-medications-table.types";

import "./claims-search.css";
import {GlobalContext} from "../../Claims/Contexts";

export interface IClaimSearchFilter {
  memberId: string;
  fillDtFrom: string | undefined;
  fillDtThru: string | undefined;
  tenantId: string | undefined;
}

export const ClaimsSearch = forwardRef((props: ClaimsSearchProps, ref: React.Ref<HTMLDivElement>) => {
  const { text, context, onClickDetails } = props;
  let globalContext = useContext(GlobalContext);
  const [claimContext, setClaimContext] = React.useState(context);
  if (globalContext) {
    console.log('In Claims Search :inside globalContext not null globalContext context ==', globalContext);

    // setClaimContext({...globalContext});
  }
  console.log('In Claims Search :context context ==', context);
  console.log('In Claims Search :globalContext context ==', globalContext);

  const [filters, setFilters] = useState<IClaimSearchFilter>({
    memberId: '',
    fillDtFrom: undefined,
    fillDtThru: undefined,
    tenantId: undefined
  });

  // const context = useContext(GlobalContext);
  console.log('In Claims Search :Claims before useMedicationsTable context  = ', claimContext);

  const { setSearchState, rows, headers } = useMedicationsTable(claimContext);


  useEffect(() => {
    // Access count value from session storage
    let claimSearchFilter: string = sessionStorage.getItem("claimSearchFilter");
    console.log('In Claims Search :filters=', filters);
    console.log('In Claims Search : props=', props);
    console.log('In Claims Search :context context ==', context);
    console.log('In Claims Search :globalContext context ==', globalContext);
    setClaimContext(props.context);
    console.log('In Claims Search :claimSearchFilter ==', claimSearchFilter);
    let claimSearchFilterObj: IClaimSearchFilter | undefined = undefined;
    try {
      claimSearchFilterObj = JSON.parse(claimSearchFilter);
    } catch (error) {
      console.log('filter in session not valid JSON');
    }
    console.log('In Claims Search :claimSearchFilterObj=', claimSearchFilterObj);
    if (claimSearchFilterObj) {
      filters.fillDtThru = claimSearchFilterObj.fillDtThru;
      filters.fillDtFrom = claimSearchFilterObj.fillDtFrom;
      filters.memberId = claimSearchFilterObj.memberId;
      filters.tenantId = props.context?.tenantId ? props.context?.tenantId : claimContext?.tenantId;
      setFilters({...filters});
      console.log('In Claims Search : filters=', filters);
      handleSearchClick(null);
    }



  }, [props.context]); //No dependency to trigger in each page load



  const handleSearchClick = (e: any) => {
    console.log('In Claims Search :filters, event =', filters , e);
    // console.log('fillDtFromRef=', fillDtFromRef, 'fillDtFromRef.current?.value?.replace(\'-\', \'\')=', fillDtFromRef.current?.value?.replaceAll('-', ''));
    const fromDt: any = filters.fillDtFrom?.split('-').join('');
    const thruDt: any = filters.fillDtThru?.split('-').join('');
    const newSearchState: SearchRecord = {
      memberId: filters.memberId,
      fillDtFrom: filters.fillDtFrom ? Number(fromDt) : undefined,
      fillDtThru: filters.fillDtThru ? Number(thruDt) : undefined,
      tenantId: claimContext?.tenantId ? claimContext?.tenantId : filters.tenantId
    };
    sessionStorage.setItem("claimSearchFilter", JSON.stringify(filters));

    console.log('In Claims Search :in claims rows =', rows);
    console.log('In Claims Search :newSearchState=', newSearchState);
    if(filters.memberId && filters.fillDtFrom && filters.fillDtThru && (claimContext?.tenantId || filters.tenantId)){
      setSearchState({...newSearchState});
    } else {
      console.log('In Claims Search : please enter all search parametes before search');
    }


    // reloadTable();
  };

  return (

    claimContext && <Grid container ref={ref} spacing={2}>
      <Grid item xs={12}>
        <Typography variant="h2">{text}-Search</Typography>
      </Grid>
      <Grid item xs={12} container spacing={2}>
        <Grid item xs={3}>
          <TextField
            label="Member ID"
            value={filters.memberId}
            onChange={(e) => setFilters({ ...filters, memberId: e.target.value })}
          />
        </Grid>
        <Grid item xs={3}>
          <TextField
            type="date"
            label="Fill Date From"
            value={filters.fillDtFrom}
            onChange={(e) => setFilters({ ...filters, fillDtFrom: e.target.value })}
          />
        </Grid>
        <Grid item xs={3}>
          <TextField
            type="date"
            label="Fill Date Thru"
            value={filters.fillDtThru}
            onChange={(e) => setFilters({ ...filters, fillDtThru: e.target.value })}
          />
        </Grid>

        {!claimContext?.tenantId &&
          <Grid item xs={3}>
            <TextField
              label="Tenant ID"
              value={filters.tenantId}
              onChange={(e) => setFilters({ ...filters, tenantId: e.target.value })}
            />
        </Grid>}
        <Grid item xs={3} className="search-button">
          <Button pt="5px" href='#' onClick={handleSearchClick} variant="contained" color="primary">
            Search
          </Button>
        </Grid>
      </Grid>

      <Grid item xs={12}>
        <MedicationsTable title="Claim Result" context={claimContext} filters={filters} onClickDetails={onClickDetails} rows={rows} headers={headers} />
      </Grid>
    </Grid>
  );
});

export default ClaimsSearch;
==
src/claims-search/ClaimsSearch/claims-search.tsx(47,9): error TS2322: Type 'string | null' is not assignable to type 'string'.
         Type 'null' is not assignable to type 'string'.
       src/claims-search/ClaimsSearch/claims-search.tsx(142,11): error TS2769: No overload matches this call.
         Overload 1 of 3, '(props: { href: string; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<Omit<DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & { ...; }, "style" | ... 24 more ... | "startIcon">): Element', gave the following error.
           Type '{ children: string; pt: string; href: string; onClick: (e: any) => void; variant: "contained"; color: "primary"; }' is not assignable to type 'IntrinsicAttributes & { href: string; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>'.
             Property 'pt' does not exist on type 'IntrinsicAttributes & { href: string; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>'.
         Overload 2 of 3, '(props: { component: ElementType<any>; } & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>): Element | null', gave the following error.
           Property 'component' is missing in type '{ children: string; pt: string; href: string; onClick: (e: any) => void; variant: "contained"; color: "primary"; }' but required in type '{ component: ElementType<any>; }'.
         Overload 3 of 3, '(props: DefaultComponentProps<ExtendButtonBaseTypeMap<ButtonTypeMap<{}, "button">>>): Element | null', gave the following error.
           Type '{ children: string; pt: string; href: string; onClick: (e: any) => void; variant: "contained"; color: "primary"; }' is not assignable to type 'IntrinsicAttributes & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>'.
             Property 'pt' does not exist on type 'IntrinsicAttributes & ButtonOwnProps & Omit<ButtonBaseOwnProps, "classes"> & CommonProps & Omit<...>'.
       src/Claims/claims.tsx(22,104): error TS2322: Type '(e: MouseEvent<HTMLAnchorElement, MouseEvent>) => void' is not assignable to type '(e: MouseEvent<HTMLAnchorElement | HTMLButtonElement, MouseEvent>) => void'.
         Types of parameters 'e' and 'e' are incompatible.
           Type 'MouseEvent<HTMLAnchorElement | HTMLButtonElement, MouseEvent>' is not assignable to type 'MouseEvent<HTMLAnchorElement, MouseEvent>'.
             Type 'HTMLAnchorElement | HTMLButtonElement' is not assignable to type 'HTMLAnchorElement'.
               Type 'HTMLButtonElement' is missing the following properties from type 'HTMLAnchorElement': charset, coords, download, hreflang, and 19 more.
       src/useClickLink/use-click-link.tsx(23,46): error TS7053: Element implicitly has an 'any' type because expression of type '"dataset"' can't be used to index type 'EventTarget'.
         Property 'dataset' does not exist on type 'EventTarget'.
       src/useClickLink/use-click-link.tsx(28,17): error TS7053: Element implicitly has an 'any' type because expression of type '"dataset"' can't be used to index type 'EventTarget'.
         Property 'dataset' does not exist on type 'EventTarget'.

======

src/claims-search/ClaimsSearch/claims-search.tsx(47,9): error TS2322: Type 'string | null' is not assignable to type 'string'.
         Type 'null' is not assignable to type 'string'.
       src/useClickLink/use-click-link.tsx(23,46): error TS7053: Element implicitly has an 'any' type because expression of type '"dataset"' can't be used to index type 'EventTarget'.
         Property 'dataset' does not exist on type 'EventTarget'.
       src/useClickLink/use-click-link.tsx(28,17): error TS7053: Element implicitly has an 'any' type because expression of type '"dataset"' can't be used to index type 'EventTarget'.
         Property 'dataset' does not exist on type 'EventTarget'.
       


====
import React from 'react';

import {useRouteEvent} from '../useRouteEvent/use-route-event';
import {useAnalyticsEvent} from '../useAnalyticsEvent/use-analytics-event';

import {UseClickLinkProps, UseClickLinkReturn} from './use-click-link.types';
import {RouteEventPayload} from "../useRouteEvent/use-route-event.types";

export function useClickLink(props: UseClickLinkProps): UseClickLinkReturn {
  const {ref} = props;

  const {dispatchRouteEvent} = useRouteEvent({ref});
  const {dispatchAnalyticsEvent} = useAnalyticsEvent({ref});

  function onClickLink(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {
    console.log('In useClickLink: onClickLink', e);
    e.preventDefault();
    e.stopPropagation();

    const {
      currentTarget: {href, dataset}
    } = e;
    console.log('e.target?.dataset=', href,  e.target['dataset']);

    let routeEventPayload: RouteEventPayload = {
      context: undefined,
      searchDetailParam: undefined,
      viewName: e.target['dataset']['viewname']};
    console.log('In useClickLink: dispatching routeEventPayload=', routeEventPayload);
    dispatchRouteEvent(routeEventPayload);
    dispatchAnalyticsEvent({category: dataset['analytics-category'] as string});
  }

  return {
    onClickLink
  };
}

export default useClickLink;


