import React from 'react';
import { styled } from '@mui/material/styles';
import { SelectChangeEvent, SxProps, Theme, FormControl, FormControlLabel, FormHelperText, Typography } from '@mui/material';
import Switch from '@mui/material/Switch';

const StyledSwitch = styled(Switch)(({ theme }) => ({
  width: 44,
  height: 24,
  padding: 0,
  display: 'flex',
  alignItems: 'center',
  '& .MuiSwitch-switchBase': {
    padding: 2,
    transition: theme.transitions.create(['transform'], {
      duration: theme.transitions.duration.shortest,
    }),
    '&.Mui-checked': {
      transform: 'translateX(20px)',
      color: '#fff',
      '& .MuiSwitch-thumb': {
        backgroundColor: '#1976D2',
        backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 24 24"><path fill="white" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"/></svg>')`,
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center',
      },
      '& + .MuiSwitch-track': {
        backgroundColor: '#90CAF9',
        opacity: 1,
      },
    },
    '&:not(.Mui-checked)': {
      '& .MuiSwitch-thumb': {
        backgroundColor: '#B0BEC5',
        backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 24 24"><path fill="white" d="M19,13H5V11H19V13Z"/></svg>')`,
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center',
      },
      '& + .MuiSwitch-track': {
        backgroundColor: '#CFD8DC',
        opacity: 1,
      },
    }
  },
  '& .MuiSwitch-thumb': {
    width: 20,
    height: 20,
    borderRadius: '50%',
    boxShadow: '0px 2px 5px rgba(0, 0, 0, 0.2)',
  },
  '& .MuiSwitch-track': {
    borderRadius: 12,
    transition: theme.transitions.create(['background-color'], {
      duration: theme.transitions.duration.shortest,
    }),
  },
}));

interface SwitchWrapperProps {
    name: string;
    value: string;
    onChange: (event: SelectChangeEvent<string>) => void;
    error?: boolean;
    helperText?: string;
    label?: string;
    required?: boolean;
    sx?: SxProps<Theme> | undefined;
    readonly?: boolean;
}

const SwitchWrapper: React.FC<SwitchWrapperProps> = ({
    name,
    value,
    onChange,
    error,
    helperText,
    label,
    sx,
    readonly
}) => {
    return (
        <FormControl error={error} sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>
            <FormControlLabel
                control={
                    <StyledSwitch
                        name={name}
                        disabled={readonly}
                        checked={value === 'Y'}
                        onChange={onChange}
                        sx={sx}
                    />
                }
                label={
                    <Typography sx={{ fontWeight: 'bold', color: 'rgb(63, 81, 181)' }}>
                        {value === 'Y' ? 'Yes' : 'No'}
                    </Typography>
                }
                labelPlacement="end"
            />
            {error && <FormHelperText>{helperText}</FormHelperText>}
        </FormControl>
    );
};

export default SwitchWrapper;
