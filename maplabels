            { name: 'mbrElig', readOnly: false, type: 'switch', apikey: 'mbrElig', required: false },
            { name: 'preValid', readOnly: false, type: 'switch', apikey: 'preValid', required: false },
            { name: 'gpiPerFills', readOnly: false, type: 'switch', apikey: 'gpiPerFills', required: false },
            { name: 'medicare', readOnly: false, type: 'switch', apikey: 'medicare', required: false },
            { name: 'pharmValidate', readOnly: false, type: 'switch', apikey: 'pharmValidate', required: false },
            { name: 'gpiContTher', readOnly: false, type: 'switch', apikey: 'gpiContTher', required: false },
            { name: 'dsLvl', readOnly: false, type: 'switch', apikey: 'dsLvl', required: false },
            { name: 'prodQualValid', readOnly: false, type: 'switch', apikey: 'prodQualValid', required: false },
            { name: 'gpiDiag', readOnly: false, type: 'switch', apikey: 'gpiDiag', required: false },
            { name: 'clariOvrd', readOnly: false, type: 'switch', apikey: 'clariOvrd', required: false },
            { name: 'pharmValid', readOnly: false, type: 'switch', apikey: 'pharmValid', required: false },
            { name: 'maintenanceDrug', readOnly: false, type: 'switch', apikey: 'maintenanceDrug', required: false },
            { name: 'custLocation', readOnly: false, type: 'switch', apikey: 'custLocation', required: false },
            { name: 'preSpeciality', readOnly: false, type: 'switch', apikey: 'preSpeciality', required: false },
            { name: 'deaClass', readOnly: false, type: 'switch', apikey: 'deaClass', required: false },
            { name: 'longTermCare', readOnly: false, type: 'switch', apikey: 'longTermCare', required: false },
            { name: 'compound', readOnly: false, type: 'switch', apikey: 'compound', required: false },
            { name: 'maxDsQty', readOnly: false, type: 'switch', apikey: 'maxDsQty', required: false },
            { name: 'pharmNetwork', readOnly: false, type: 'switch', apikey: 'pharmNetwork', required: false },
            { name: 'ndcList', readOnly: false, type: 'switch', apikey: 'ndcList', required: false },
            { name: 'refillLims', readOnly: false, type: 'switch', apikey: 'refillLims', required: false },
            { name: 'careFacility', readOnly: false, type: 'switch', apikey: 'careFacility', required: false },
            { name: 'ndcPerFills', readOnly: false, type: 'switch', apikey: 'ndcPerFills', required: false },
            { name: 'otcs', readOnly: false, type: 'switch', apikey: 'otcs', required: false },
            { name: 'careNetwork', readOnly: false, type: 'switch', apikey: 'careNetwork', required: false },
            { name: 'ndcContTher', readOnly: false, type: 'switch', apikey: 'ndcContTher', required: false },
            { name: 'thirdPartyExc', readOnly: false, type: 'switch', apikey: 'thirdPartyExc', required: false },
            { name: 'preNetwork', readOnly: false, type: 'switch', apikey: 'preNetwork', required: false },
            { name: 'ndcDiag', readOnly: false, type: 'switch', apikey: 'ndcDiag', required: false },
            { name: 'routeOfAdmin', readOnly: false, type: 'switch', apikey: 'routeOfAdmin', required: false },
            { name: 'gpiList', readOnly: false, type: 'switch', apikey: 'gpiList', required: false },
            { name: 'dosageForm', readOnly: false, type: 'switch', apikey: 'dosageForm', required: false },
            { name: 'desi', readOnly: false, type: 'switch', apikey: 'desi', required: false },
            { name: 'paConflict', readOnly: false, type: 'switch', apikey: 'paConflict', required: false },
            { name: 'unbrkblPackage', readOnly: false, type: 'switch', apikey: 'unbrkblPackage', required: false },
            { name: 'medicaidProd', readOnly: false, type: 'switch', apikey: 'medicaidProd', required: false },
            { name: 'memEligDiagCode', readOnly: false, type: 'switch', apikey: 'memEligDiagCode', required: false },
            { name: 'pckgExc', readOnly: false, type: 'switch', apikey: 'pckgExc', required: false },
            { name: 'specialityPgm', readOnly: false, type: 'switch', apikey: 'specialityPgm', required: false },
            { name: 'cagPosClmTimlyFile', readOnly: false, type: 'switch', apikey: 'cagPosClmTimlyFile', required: false },
            { name: 'fdaTherEqui', readOnly: false, type: 'switch', apikey: 'fdaTherEqui', required: false },
            { name: 'lvlOfService', readOnly: false, type: 'switch', apikey: 'lvlOfService', required: false },
            { name: 'cagMailRtlClmInact', readOnly: false, type: 'switch', apikey: 'cagMailRtlClmInact', required: false },
            { name: 'therCat', readOnly: false, type: 'switch', apikey: 'therCat', required: false },
            { name: 'workCompBenBlk', readOnly: false, type: 'switch', apikey: 'workCompBenBlk', required: false },
            { name: 'brandGeneric', readOnly: false, type: 'switch', apikey: 'brandGeneric', required: false },
            { name: 'incidentProd', readOnly: false, type: 'switch', apikey: 'incidentProd', required: false },
            { name: 'prefFormulary', readOnly: false, type: 'switch', apikey: 'prefFormulary', required: false },
            { name: 'referDrgSts', readOnly: false, type: 'switch', apikey: 'referDrgSts', required: false },
            { name: 'rxRestrictions', readOnly: false, type: 'switch', apikey: 'rxRestrictions', required: false },
            { name: 'tranBenFrmCt', readOnly: false, type: 'switch', apikey: 'tranBenFrmCt', required: false },
            { name: 'dur', readOnly: false, type: 'switch', apikey: 'dur', required: false },
            { name: 'formMgmtSvcs', readOnly: false, type: 'switch', apikey: 'formMgmtSvcs', required: false },
            { name: 'mpoPharm', readOnly: false, type: 'switch', apikey: 'mpoPharm', required: false },
            { name: 'transBene', readOnly: false, type: 'switch', apikey: 'transBene', required: false },
            { name: 'discBenePr', readOnly: false, type: 'switch', apikey: 'discBenePr', required: false },
            { name: 'addDate', readOnly: false, type: 'date', apikey: 'addDate', required: false },
            { name: 'chgDate', readOnly: false, type: 'date', apikey: 'chgDate', required: false },
            { name: 'chgUser', readOnly: false, type: 'text', apikey: 'chgUser', required: false }





{
  "memberId": "Member ID",
  "carrierId": "Carrier ID",
  "accountId": "Account ID",
  "groupId": "Group ID",
  "planId": "Plan ID",
  "dob": "Date of birth",
  "sex": "Gender",
  "personCd": "Person code",
  "familyInd": "Family ind",
  "familyId": "Family ID",
  "relationshipCd": "Relationship code",
  "memberType": "Member type",
  "multiBirthCd": "Multiple birth code",
  "language": "Language",
  "ssn": "SSN",
  "email": "Email",
  "originalEffDate": "Original from date",
  "benefitResetDate": "Benefit reset date",
  "address1": "Address 1",
  "address2": "Address 2",
  "address3": "Address 3",
  "city": "City",
  "state": "State",
  "zip1": "Zip 1",
  "zip2": "Zip 2",
  "zip3": "Zip 3",
  "mbrCountry": "Country",
  "country": "Country",
  "phone": "Phone",
  "added": "Added",
  "changed": "Changed",
  "user": "User",
  "supplementalType": "Supplemental type",
  "supplementalId": "Supplemental ID",
  "msiFromDate": "From date",
  "msiThruDate": "Thru date",
  "msiStatus": "Status",
  "insuranceFlag": "Flag",
  "insuranceId": "Code",
  "insuranceCode": "ID",
  "medicareId": "Medicare ID",
  "status": "Status",
  "fromDate": "From date",
  "thruDate": "Thru date",
  "supplementalIdType": "Type",
  "description": "Description",
  "text": "Text",
  "supplementId": "Supplemental ID",
  "addDate": "Added",
  "changeDate": "Changed",
  "changeUser": "User",
  "contractNumber": "Contract",
  "pbpNumber": "PBP",
  "segmentId": "Segment",
  "subsidyLevel": "Subsidy level",
  "copayCategory": "Copay category",
  "recordStatus": "Status",
  "formularyId": "Formulary ID",
  "effectiveDate": "Effective date",
  "enrollmentSource": "Enrollment source",
  "issuerId": "Issuer ID",
  "productNbr": "Product number",
  "stdComp": "Std comp",
  "fedCSRLevel": "Federal CSR level",
  "stateCSRLevel": "State CSR level",
  "gpStartDate": "Grace period start date",
  "aptcIndicator": "APTC indicator",
  "ethnicity": "Ethnicity",
  "gpEndDate": "Grace period end date",
  "coverageType": "Coverage type",
  "bin": "BIN",
  "prcCtlNbr": "PCN",
  "sbmGrpNbr": "Group",
  "coverageCategory": "Coverage category",
  "helpDeskTelephone": "Help Desk number",
  "coverageId": "Coverage ID",
  "tplSourceId": "TPL source ID",
  "tplSourceCd": "TPL source code",
  "chgDate": "Changed",
  "altInsuranceFlag": "Flag",
  "altInsuranceId": "Code",
  "cobPricingType": "COB pricing type",
  "type": "Type",
  "planMetalIndicator": "Plan metal indicator",
  "effDate": "From date",
  "planCode": "Override plan",
  "copayBrand": "Brand copay",
  "copayGen": "Generic copay",
  "copay3": "Copay 3",
  "copay4": "Copay 4",
  "clientProductCode": "Client product code",
  "clientRiderCode": "Client rider code",
  "spendDownAmount": "Spend-down amount",
  "effDetDate": "Effective date",
  "troop": "TrOOP",
  "drugSpend": "Drug spend",
  "benefitYear": "Benefit year",
  "benefitMonth": "Benefit month",
  "reason": "Reason",
  "professional": "Professional",
  "result": "Result",
  "response": "Response",
  "seqNbr": "Sequence number",
  "displaySeqNbr": "Sequence number",
  "claimNbr": "RxClaim#",
  "medLimOverride": "Override",
  "bypass": "Bypass",
  "perFill": "NTT fill days supply",
  "priorANum": "Prior auth number",
  "pharmThresh": "Pharmacy threshold",
  "preThresh": "Prescriber threshold",
  "papCurrentDteEff": "From date",
  "papCurrentDteTermed": "Thru date",
  "priorANumPA": "PA number",
  "papPriorAType": "PA type",
  "papMultiSourceCode": "MSC",
  "papRxOtcInd": "OTC",
  "papNdcGpiCode": "NDC/GPI/List ID",
  "papDescription": "Description",
  "papReasonCode": "Reason code",
  "papIgnorePaStatus": "Ignore drug sts",
  "papAgent": "Agent",
  "mbrElig": "Mbr elig sbm/compare",
  "preValid": "Prescriber validation",
  "gpiPerFills": "GPI period fills",
  "medicare": "Mbr elig medicare",
  "pharmValidate": "Pharmacist validation",
  "gpiContTher": "GPI contingent therapy",
  "dsLvl": "Mbr elig DS level",
  "prodQualValid": "Prod qual validation",
  "gpiDiag": "GPI diagnosis list",
  "clariOvrd": "Clarification override",
  "pharmValid": "Pharmacy validation",
  "maintenanceDrug": "Maintenance",
  "custLocation": "Cust loc/patient resid",
  "preSpeciality": "Prescriber specialty",
  "deaClass": "DEA class",
  "longTermCare": "Long term care",
  "compound": "Compounds",
  "maxDsQty": "Max days supply/qty",
  "pharmNetwork": "Pharmacy network",
  "ndcList": "NDC list",
  "refillLims": "Refill limits",
  "careFacility": "Care facility",
  "ndcPerFills": "NDC period fills",
  "otcs": "OTCs",
  "careNetwork": "Care network",
  "ndcContTher": "NDC contingent therapy",
  "thirdPartyExc": "Third party exception",
  "preNetwork": "Prescriber network",
  "ndcDiag": "NDC diagnosis list",
  "routeOfAdmin": "Rte of administration",
  "gpiList": "GPI list",
  "dosageForm": "Dosage form",
  "desi": "DESI",
  "paConflict": "PA error",
  "unbrkblPackage": "Unbreakable package",
  "medicaidProd": "Medicaid product",
  "memEligDiagCode": "Mbr elig diagnosis code",
  "pckgExc": "Package exceptions",
  "specialityPgm": "Specialty program",
  "cagPosClmTimlyFile": "CAG POS clm timely fil",
  "fdaTherEqui": "FDA thera equiv",
  "lvlOfService": "Level of service",
  "cagMailRtlClmInact": "CAG mail/rtl clm inact",
  "therCat": "Therapeutic category",
  "workCompBenBlk": "Worker's comp ben block",
  "brandGeneric": "Brand/generic",
  "incidentProd": "Incident product",
  "prefFormulary": "Preferred formulary",
  "referDrgSts": "Referral sts schedule",
  "rxRestrictions": "Rx restrictions",
  "tranBenFrmCt": "Trans benf-excl from CT",
  "durKey": "DUR key",
  "formMgmtSvcs": "Formulary mgmt services",
  "mpoPharm": "Mbr provider pharmacy",
  "transBene": "Transitional benefits",
  "discBenePr": "Discount benf processing",
  "submittedDate": "Date/Time",
  "transactionCode": "Code",
  "transactionId": "Transaction",
  "firSeqNbr": "Sequence",
  "accumMonth": "Month",
  "sbmTroop": "Received TrOOP",
  "sbmDrugSpend": "Received drug spend",
  "intTroop": "Internal member pay",
  "intDrugSpend": "Internal drug spend",
  "sntTroop": "Sent TrOOP",
  "sntDrugSpend": "Sent drug spend",
  "rxClaimNbr": "RxClaim#",
  "transCd": "Transaction code",
  "patPay": "Patient pay amount",
  "troopUpdAmount": "TrOOP update amount",
  "updAmtRsnCd": "Update amt reason",
  "chgUser": "User",
  "adjustmentDate": "Adjustment date",
  "benefitCode": "Client benefit",
  "senderType": "Sender type",
  "accumCode": "Accumulation code",
  "reasonCode": "Reason code",
  "benType": "Type",
  "recordDate": "Record timestamp",
  "amountType": "Amount type",
  "amount": "Amount",
  "milliseconds": "Millisecond",
  "recordOrder": "Record order",
  "recordId": "Record ID",
  "senderId": "Sender ID",
  "senderDescription": "Sender description",
  "senderTimestamp": "Sender timestamp",
  "claimSeq": "Claim sequence",
  "claimStatus": "Claim status",
  "addedDate": "Added date",
  "changedDate": "Changed date",
  "adjustmentTime": "Adjustment time",
  "adjDate": "Adjustment date",
  "adjType": "Type",
  "paidCode": "Reason code",
  "adjMethod": "Adjustment method",
  "checkNbr": "Check number",
  "adjAmount": "Amount",
  "adjStatus": "Status",
  "lastName": "Payee last name",
  "firstName": "Payee first name",
  "note": "Note",
  "adjNbr": "Adjustment number",
  "seqNum": "Sequence number",
  "recordDateFormatted": "Record date",
  "diagnosisQualifier": "Diagnosis qualifier",
  "diagnosisType": "Diagnosis type",
  "diagnosisCode": "Diagnosis code",
  "diagnosisDescription": "Diagnosis description",
  "providerId": "Provider ID",
  "planYear": "Plan year",
  "pbp": "PBP",
  "binNbr": "BIN",
  "processorCtlNbr": "PCN",
  "contractId": "Contract ID",
  "firStatus": "Status",
  "multiLock": "Multi lock",
  "provider": "Provider",
  "qual": "Qualifier",
  "pharmPrice": "Pharmacy price",
  "pharmPat": "Pharmacy patient",
  "clientPrice": "Client price",
  "clientPat": "Client patient",
  "pharmNetworkId": "Pharmacy network ID",
  "copaySchedName": "Copay schedule",
  "stepNum": "Step number",
  "clientPrcSch3": "Client price schedule",
  "pharmPrcSch3": "Pharmacy price schedule",
  "clientPatPay3": "Client patient pay",
  "pharmPatPay3": "Pharmacy patient pay",
  "messageCode": "Message code",
  "messageType": "Message type",
  "ntwkOvrdQual": "Network override qual",
  "ndcListQual": "NDC list qual",
  "gpiListQual": "GPI list qual",
  "listMessageCode": "List message code",
  "listMessageType": "List message type",
  "patResCodeList": "Patient res code list",
  "priceSchedName": "Client price schedule",
  "pharmPrcSched": "Pharmacy price schedule",
  "clientPatPay": "Client patient pay",
  "pharmPatPay": "Pharmacy patient pay",
  "preIdQual": "Prescriber ID qual",
  "preIdState": "Prescriber ID state",
  "preId": "Prescriber ID",
  "clientPrcSch1": "Client price schedule",
  "pharmPrcSch1": "Pharmacy price schedule",
  "clientPatPay1": "Client patient pay",
  "pharmPatPay1": "Pharmacy patient pay",
  "pharmOvrdQual": "Pharmacy override qual",
  "clientPrcSch2": "Client price schedule",
  "pharmPrcSch2": "Pharmacy price schedule",
  "clientPatPay2": "Client patient pay",
  "pharmPatPay2": "Pharmacy patient pay",
  "pharmId": "Pharmacy ID",
  "preNetworkId": "Prescriber network ID",
  "requestDate": "Request date",
  "nbrOfIDCards": "Number of cards",
  "requestUser": "Requested by",
  "qualifier": "Qualifier",
  "typeCode": "Type",
  "platformId": "Platform ID",
  "melEffDate": "From date",
  "melThruDate": "Thru date",
  "melClientProductCode": "Client product code",
  "melClientRiderCode": "Client rider code",
  "planEffDate": "From date",
  "planThruDate": "Thru date",
  "planName": "Description",
  "dur": "DUR"
}



const layout = [
  { name: 'mbrElig', readOnly: false, type: 'switch', apikey: 'mbrElig', required: false, label: 'Mbr elig sbm/compare' },
  { name: 'preValid', readOnly: false, type: 'switch', apikey: 'preValid', required: false, label: 'Pre Valid' },
  { name: 'gpiPerFills', readOnly: false, type: 'switch', apikey: 'gpiPerFills', required: false, label: 'GPI Per Fills' },
  { name: 'medicare', readOnly: false, type: 'switch', apikey: 'medicare', required: false, label: 'Medicare' },
  { name: 'pharmValidate', readOnly: false, type: 'switch', apikey: 'pharmValidate', required: false, label: 'Pharm Validate' },
  { name: 'gpiContTher', readOnly: false, type: 'switch', apikey: 'gpiContTher', required: false, label: 'GPI Continuation Therapy' },
  { name: 'dsLvl', readOnly: false, type: 'switch', apikey: 'dsLvl', required: false, label: 'DS Level' },
  { name: 'prodQualValid', readOnly: false, type: 'switch', apikey: 'prodQualValid', required: false, label: 'Product Qualification Valid' },
  { name: 'gpiDiag', readOnly: false, type: 'switch', apikey: 'gpiDiag', required: false, label: 'GPI Diagnosis' },
  { name: 'clariOvrd', readOnly: false, type: 'switch', apikey: 'clariOvrd', required: false, label: 'Clarity Override' },
  { name: 'pharmValid', readOnly: false, type: 'switch', apikey: 'pharmValid', required: false, label: 'Pharmacy Validation' },
  { name: 'maintenanceDrug', readOnly: false, type: 'switch', apikey: 'maintenanceDrug', required: false, label: 'Maintenance Drug' },
  { name: 'custLocation', readOnly: false, type: 'switch', apikey: 'custLocation', required: false, label: 'Customer Location' },
  { name: 'preSpeciality', readOnly: false, type: 'switch', apikey: 'preSpeciality', required: false, label: 'Pre-Speciality' },
  { name: 'deaClass', readOnly: false, type: 'switch', apikey: 'deaClass', required: false, label: 'DEA Class' },
  { name: 'longTermCare', readOnly: false, type: 'switch', apikey: 'longTermCare', required: false, label: 'Long Term Care' },
  { name: 'compound', readOnly: false, type: 'switch', apikey: 'compound', required: false, label: 'Compound' },
  { name: 'maxDsQty', readOnly: false, type: 'switch', apikey: 'maxDsQty', required: false, label: 'Max DS Quantity' },
  { name: 'pharmNetwork', readOnly: false, type: 'switch', apikey: 'pharmNetwork', required: false, label: 'Pharmacy Network' },
  { name: 'ndcList', readOnly: false, type: 'switch', apikey: 'ndcList', required: false, label: 'NDC List' },
  { name: 'refillLims', readOnly: false, type: 'switch', apikey: 'refillLims', required: false, label: 'Refill Limits' },
  { name: 'careFacility', readOnly: false, type: 'switch', apikey: 'careFacility', required: false, label: 'Care Facility' },
  { name: 'ndcPerFills', readOnly: false, type: 'switch', apikey: 'ndcPerFills', required: false, label: 'NDC Per Fills' },
  { name: 'otcs', readOnly: false, type: 'switch', apikey: 'otcs', required: false, label: 'OTCs' },
  { name: 'careNetwork', readOnly: false, type: 'switch', apikey: 'careNetwork', required: false, label: 'Care Network' },
  { name: 'ndcContTher', readOnly: false, type: 'switch', apikey: 'ndcContTher', required: false, label: 'NDC Continuation Therapy' },
  { name: 'thirdPartyExc', readOnly: false, type: 'switch', apikey: 'thirdPartyExc', required: false, label: 'Third Party Exception' },
  { name: 'preNetwork', readOnly: false, type: 'switch', apikey: 'preNetwork', required: false, label: 'Pre Network' },
  { name: 'ndcDiag', readOnly: false, type: 'switch', apikey: 'ndcDiag', required: false, label: 'NDC Diagnosis' },
  { name: 'routeOfAdmin', readOnly: false, type: 'switch', apikey: 'routeOfAdmin', required: false, label: 'Route of Administration' },
  { name: 'gpiList', readOnly: false, type: 'switch', apikey: 'gpiList', required: false, label: 'GPI List' },
  { name: 'dosageForm', readOnly: false, type: 'switch', apikey: 'dosageForm', required: false, label: 'Dosage Form' },
  { name: 'desi', readOnly: false, type: 'switch', apikey: 'desi', required: false, label: 'DESI' },
  { name: 'paConflict', readOnly: false, type: 'switch', apikey: 'paConflict', required: false, label: 'PA Conflict' },
  { name: 'unbrkblPackage', readOnly: false, type: 'switch', apikey: 'unbrkblPackage', required: false, label: 'Unbreakable Package' },
  { name: 'medicaidProd', readOnly: false, type: 'switch', apikey: 'medicaidProd', required: false, label: 'Medicaid Product' },
  { name: 'memEligDiagCode', readOnly: false, type: 'switch', apikey: 'memEligDiagCode', required: false, label: 'MEM Eligibility Diagnosis Code' },
  { name: 'pckgExc', readOnly: false, type: 'switch', apikey: 'pckgExc', required: false, label: 'Package Exception' },
  { name: 'specialityPgm', readOnly: false, type: 'switch', apikey: 'specialityPgm', required: false, label: 'Speciality Program' },
  { name: 'cagPosClmTimlyFile', readOnly: false, type: 'switch', apikey: 'cagPosClmTimlyFile', required: false, label: 'CAG Positive Claim Timely File' },
  { name: 'fdaTherEqui', readOnly: false, type: 'switch', apikey: 'fdaTherEqui', required: false, label: 'FDA Therapeutic Equivalency' },
  { name: 'lvlOfService', readOnly: false, type: 'switch', apikey: 'lvlOfService', required: false, label: 'Level of Service' },
  { name: 'cagMailRtlClmInact', readOnly: false, type: 'switch', apikey: 'cagMailRtlClmInact', required: false, label: 'CAG Mail Return Claim Inactive' },
  { name: 'therCat', readOnly: false, type: 'switch', apikey: 'therCat', required: false, label: 'Therapeutic Category' },
  { name: 'workCompBenBlk', readOnly: false, type: 'switch', apikey: 'workCompBenBlk', required: false, label: 'Work Comp Benefit Block' },
  { name: 'brandGeneric', readOnly: false, type: 'switch', apikey: 'brandGeneric', required: false, label: 'Brand vs Generic' },
  { name: 'incidentProd', readOnly: false, type: 'switch', apikey: 'incidentProd', required: false, label: 'Incident Product' },
  { name: 'prefFormulary', readOnly: false, type: 'switch', apikey: 'prefFormulary', required: false, label: 'Preferred Formulary' },
  { name: 'referDrgSts', readOnly: false, type: 'switch', apikey: 'referDrgSts', required: false, label: 'Refer Drug Status' },
  { name: 'rxRestrictions', readOnly: false, type: 'switch', apikey: 'rxRestrictions', required: false, label: 'RX Restrictions' },
  { name: 'tranBenFrmCt', readOnly: false, type: 'switch', apikey: 'tranBenFrmCt', required: false, label: 'Transfer Benefit From Ct' },
  { name: 'dur', readOnly: false, type: 'switch', apikey: 'dur', required: false, label: 'DUR' },
  { name: 'formMgmtSvcs', readOnly: false, type: 'switch', apikey: 'formMgmtSvcs', required: false, label: 'Formulary Management Services' },
  { name: 'mpoPharm', readOnly: false, type: 'switch', apikey: 'mpoPharm', required: false, label: 'MPO Pharmacy' },
  { name: 'transBene', readOnly: false, type: 'switch', apikey: 'transBene', required: false, label: 'Transition Benefit' },
  { name: 'discBenePr', readOnly: false, type: 'switch', apikey: 'discBenePr', required: false, label: 'Discount Benefit Program' },
  { name: 'addDate', readOnly: false, type: 'date', apikey: 'addDate', required: false, label: 'Add Date' },
  { name: 'chgDate', readOnly: false, type: 'date', apikey: 'chgDate', required: false, label: 'Change Date' },
  { name: 'chgUser', readOnly: false, type: 'text', apikey: 'chgUser', required: false, label: 'Changed By User' }
];


import React from 'react';
import { SelectChangeEvent, SxProps, Theme, Switch, FormControlLabel, FormHelperText, FormControl } from '@mui/material';
import { Check, Clear } from '@mui/icons-material';

interface SwitchWrapperProps {
    name: string;
    value: string;
    onChange: (event: SelectChangeEvent<string>) => void;
    error?: boolean;
    helperText?: string;
    label?: string;
    required?: boolean;
    sx?: SxProps<Theme> | undefined;
    readonly? : boolean;
}

const SwitchWrapper: React.FC<SwitchWrapperProps> = ({
                                                         name,
                                                         value,
                                                         onChange,
                                                         error,
                                                         helperText,
                                                         label,
                                                         sx,
                                                         readonly
                                                     }) => {
    const defaultSx: SxProps<Theme> = {};
  console.log('value in switch wrapper', value);
    return (
      <FormControl error={error}>
        <FormControlLabel
          control={
            <Switch
              name={name}
              disabled={readonly}
              checked={value === 'Y'}
              onChange={onChange}
              style={{ overflow: 'auto' }}
              sx={{ ...defaultSx, ...(sx || {}) }}
              icon={<Clear style={{ color: 'red' }} />}
              checkedIcon={<Check style={{ color: 'green' }} />}
            />
          }
          label={label}
          labelPlacement="start"
          sx={{
            '& .MuiFormControlLabel-label': {
              marginRight: '16px',
              fontWeight: 'bold',
              color: 'rgb(63, 81, 181)'
            }
          }}
        />
        {error && <FormHelperText>{helperText}</FormHelperText>}
      </FormControl>
    );
};

export default SwitchWrapper;

-----
updated


import React from 'react';
import { styled } from '@mui/material/styles';
import { SelectChangeEvent, SxProps, Theme, FormControl, FormControlLabel, FormHelperText } from '@mui/material';
import Switch from '@mui/material/Switch';

const StyledSwitch = styled(Switch)(({ theme }) => ({
  width: 44,
  height: 24,
  padding: 0,
  display: 'flex',
  alignItems: 'center',
  '& .MuiSwitch-switchBase': {
    padding: 2,
    transition: theme.transitions.create(['transform'], {
      duration: theme.transitions.duration.shortest,
    }),
    '&.Mui-checked': {
      transform: 'translateX(20px)',
      color: '#fff',
      '& + .MuiSwitch-track': {
        backgroundColor: '#90CAF9',
        opacity: 1,
      },
    },
  },
  '& .MuiSwitch-thumb': {
    width: 20,
    height: 20,
    backgroundColor: '#1976D2',
    borderRadius: '50%',
    boxShadow: '0px 2px 5px rgba(0, 0, 0, 0.2)',
  },
  '& .MuiSwitch-track': {
    borderRadius: 12,
    backgroundColor: '#E3F2FD',
    opacity: 1,
    transition: theme.transitions.create(['background-color'], {
      duration: theme.transitions.duration.shortest,
    }),
  },
}));

interface SwitchWrapperProps {
    name: string;
    value: string;
    onChange: (event: SelectChangeEvent<string>) => void;
    error?: boolean;
    helperText?: string;
    label?: string;
    required?: boolean;
    sx?: SxProps<Theme> | undefined;
    readonly?: boolean;
}

const SwitchWrapper: React.FC<SwitchWrapperProps> = ({
    name,
    value,
    onChange,
    error,
    helperText,
    label,
    sx,
    readonly
}) => {
    return (
        <FormControl error={error}>
            <FormControlLabel
                control={
                    <StyledSwitch
                        name={name}
                        disabled={readonly}
                        checked={value === 'Y'}
                        onChange={onChange}
                        sx={sx}
                    />
                }
                label={label}
                labelPlacement="start"
                sx={{
                    '& .MuiFormControlLabel-label': {
                        marginRight: '16px',
                        fontWeight: 'bold',
                        color: 'rgb(63, 81, 181)'
                    }
                }}
            />
            {error && <FormHelperText>{helperText}</FormHelperText>}
        </FormControl>
    );
};

export default SwitchWrapper;

