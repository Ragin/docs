medications-table.tsx file as below

import React from 'react';
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Typography from '@mui/material/Typography';

import {useMedicationsTable} from '../useMedicationsTable/use-medications-table';
import {ClaimsRecord} from '../useMedicationsTable/use-medications-table.types';

import {MedicationsTableProps} from './medications-table.types';
import store from "../../model/store";
import {Provider} from "react-redux";

export function MedicationsTable(props: MedicationsTableProps) {
  const {title, rows, headers} = props;
  console.log('rows=', rows);
  // const {headers1, rows1, forceReRender} = useMedicationsTable();
  // console.log('rows1=', rows1);
  const headersMap = (header: string) => (
    <TableCell key={header} align="left">
      {header}
    </TableCell>
  );

  const rowsMap = (row: ClaimsRecord) => (
    <TableRow key={row.rxSeq} sx={{'&:last-child td, &:last-child th': {border: 0}}}>
      <TableCell>{row.rxSeq}</TableCell>
      <TableCell>{row.sbmDt}</TableCell>
      <TableCell>{row.firstName}</TableCell>
      <TableCell>{row.lastName}</TableCell>

      <TableCell>{row.rxNumber}</TableCell>
      <TableCell>{row.refillNumber}</TableCell>
      <TableCell>{row.claimStatus}</TableCell>
      <TableCell>{row.rxClaimNbr}</TableCell>
    </TableRow>
  );

  return (
    <Provider store={store} >
    <>

      <Typography variant="h2">{title}</Typography>
      <TableContainer component={Paper}>
        <Table sx={{minWidth: 650}} aria-label="simple table">
          <TableHead>
            <TableRow>{headers.map(headersMap)}</TableRow>
          </TableHead>
          <TableBody>{rows?.map(rowsMap)}</TableBody>
        </Table>
      </TableContainer>

    </>
    </Provider>

  );
}

export default MedicationsTable;

=========
use-medications-table.tsx file as below
import React, { useEffect, useState } from 'react';
import { ClaimsRecord} from './use-medications-table.types';
import { getData } from '../../model/service/testService';
import { useDispatch, useSelector } from 'react-redux';
import { setSearchParams } from '../../model/reducers/searchParamsSlice';


interface UsedMedicationTableReturn {
  headers: string[];
  reloadTable: () => void;
  setSearchState: (value: any) => void;
  loading: boolean;
  rows: Array<ClaimsRecord>;
}

export function useMedicationsTable(): UsedMedicationTableReturn {
  const dispatch = useDispatch();
  const searchParams = useSelector((state) => state.app.searchParams);
  const headers = ['Seq', 'Submitted Date', 'First Name', 'Last Name', 'RxNumber', 'Refill Number', 'Claim Status', 'RX Claim Nbr'];
  const [rows, setRows] = useState<Array<ClaimsRecord>>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [searchState, setSearchState] = useState<any>({});
  const [forceRenderer, setForceRenderer] = useState<boolean>(false);
  const fetchData = async () => {

  try {
     console.log('searchState=', searchState)

      const response = await getData('https://rxclaim-lite-api-dev-ctc.optum.com/rxclaim-lite', '/search', null, searchState);
      const data = response?.data?.memberSrchInfoResp ? response?.data?.memberSrchInfoResp : [];
      console.log(data);
      setRows([...data]);
      setLoading(false);
      return data;
    } catch (error) {
      console.error('Error fetching data:', error);
      setLoading(false);
    }
    return [];
  };

  useEffect(() => {
    fetchData();
    setForceRenderer((prev) => !prev);
  }, [searchParams]);

  return {
    headers,
    loading,
    rows,
    setSearchState,
    reloadTable: () => {
     // setSearchState((searchState) => ({...searchState}))
      setSearchState: (newSearchParams) => dispatch(setSearchParams(newSearchParams))
    }
  };
}

export default useMedicationsTable;
=========
use-claims.tsx file as below
import {useClickLink} from '../useClickLink/use-click-link';

import {UseClaimsProps, UseClaimsReturn} from './use-claims.types';

export function useClaims(props: UseClaimsProps): UseClaimsReturn {
  const {ref} = props;
  const {onClickLink} = useClickLink({ref});

  return {
    onClickLink
  };
}



export default useClaims;

=========
searchParamsSlice.ts file as below 

import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  searchParams: {},
};

const searchParamsSlice = createSlice({
  name: 'app',
  initialState,
  reducers: {
    setSearchParams: (state, action) => {
      state.searchParams = action.payload;
    },
  },
});

export const { setSearchParams } = searchParamsSlice.actions;
export default searchParamsSlice.reducer;

index.ts file as below
import { combineReducers } from 'redux';
import searchParamsReducer from './searchParamsSlice'; // Create searchParamsSlice.js file

const rootReducer = combineReducers({
  app: searchParamsReducer,
});

export default rootReducer;

=========
store.ts file as below 
import { configureStore } from '@reduxjs/toolkit';
import thunk from 'redux-thunk';
import rootReducer from './reducers';

const store = configureStore({
  reducer: rootReducer,
  middleware: [thunk],
});

export default store;
=========
use-claims.tsx file as below 
import {useClickLink} from '../useClickLink/use-click-link';

import {UseClaimsProps, UseClaimsReturn} from './use-claims.types';

export function useClaims(props: UseClaimsProps): UseClaimsReturn {
  const {ref} = props;
  const {onClickLink} = useClickLink({ref});

  return {
    onClickLink
  };
}



export default useClaims;

=========
main index.ts as below
export * from './Claims/claims';
export * from './Claims/claims.types';

export * from './useClaims/use-claims';
export * from './useClaims/use-claims.types';
export * from '../src/model/store';
export * from '../src/model/reducers';

export * from './events/events';
export * from './events/events.types';

export * from './useRouteEvent/use-route-event';
export * from './useRouteEvent/use-route-event.types';

export * from './useAnalyticsEvent/use-analytics-event';
export * from './useAnalyticsEvent/use-analytics-event.types';

export * from './useClickLink/use-click-link';
export * from './useClickLink/use-click-link.types';
export * from './medications-table/MedicationsTable/medications-table';
export * from './medications-table/MedicationsTable/medications-table.types';

export * from './medications-table/useMedicationsTable/use-medications-table';
export * from './medications-table/useMedicationsTable/use-medications-table.types';
=========
testService.ts file as below 

import axios, { AxiosError } from 'axios';
interface ConfigServiceResponse {
  data: {
    config: any;
  };
}

export function getData(basePath: string, feature: string, headers: any, userSelectedValues: any): Promise<any> {
  const url = `${basePath}${feature}`;
  console.log('in getData');
  const config = {
    headers,
  };

  const requestData = {
    ...userSelectedValues,
  };

  return new Promise((resolve, reject) => {
    axios.post<{ data: any }>(url, requestData, config)
      .then((response) => {
        resolve(response);
      })
      .catch((error: AxiosError) => {
        if (error.response) {
          console.error('Server responded with an error status:', error.response.status);
          console.error('Response data:', error.response.data);
          reject(error.response);
        } else if (error.request) {
          console.error('No response received from the server.');
          reject(error.request);
        } else {
          console.error('Error setting up the request:', error.message);
          reject(error.message);
        }
      });
  });
}

