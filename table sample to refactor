import React from 'react';
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Typography from '@mui/material/Typography';

import {useMedicationsTable} from '../useMedicationsTable/use-medications-table';
import {ClaimsRecord} from '../useMedicationsTable/use-medications-table.types';

import {MedicationsTableProps} from './medications-table.types';

export function MedicationsTable(props: MedicationsTableProps) {
  const {title} = props;
  const {headers, rows} = useMedicationsTable();

  const headersMap = (header: string) => (
    <TableCell key={header} align="left">
      {header}
    </TableCell>
  );

  const rowsMap = (row: ClaimsRecord) => (
    <TableRow key={row.rxSeq} sx={{'&:last-child td, &:last-child th': {border: 0}}}>
      <TableCell>{row.sbmDt}</TableCell>
      <TableCell>{row.lastName}</TableCell>
      <TableCell>{row.firstName}</TableCell>
      <TableCell>{row.rxNumber}</TableCell>
      <TableCell>{row.refillNumber}</TableCell>
      <TableCell>{row.claimStatus}</TableCell>
      <TableCell>{row.rxClaimNbr}</TableCell>
    </TableRow>
  );

  return (
    <>
      <Typography variant="h2">{title}</Typography>
      <TableContainer component={Paper}>
        <Table sx={{minWidth: 650}} aria-label="simple table">
          <TableHead>
            <TableRow>{headers.map(headersMap)}</TableRow>
          </TableHead>
          <TableBody>{rows.map(rowsMap)}</TableBody>
        </Table>
      </TableContainer>
    </>
  );
}

export default MedicationsTable;


======


// use-medications-table.tsx

import React, { useEffect, useState } from 'react';
import { ClaimsRecord, UseMedicationsTableReturn } from './use-medications-table.types';
import { getData } from '../../model/service/testService';

export function useMedicationsTable(): UseMedicationsTableReturn {
  const headers = ['Seq', 'Submitted Date', 'First Name', 'RxNumber', 'Refill Number', 'Claim Status', 'RX Claim Nbr'];
  const [rows, setRows] = useState<Array<ClaimsRecord>>([]);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await getData('/sdd', '/dss', null);
        const data = response.data.memberSrchInfoResp;
        console.log(data);
        setRows(data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching data:', error);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  return {
    headers,
    loading,
    rows,
  };
}

export default useMedicationsTable;

==service
import axios, { AxiosError } from 'axios';
import { ClaimsRecord } from '../../medications-table/useMedicationsTable/use-medications-table.types';

interface ConfigServiceResponse {
  data: {
    config: any;
  };
}

// Update the getData function signature to accept additional parameters
export function getData(basePath: string, feature: string, headers: any, userSelectedValues: { memberId?: string, fillDtFrom?: string, fillDtThru?: string, tenantId?: string }): Promise<any> {
  const url = `${basePath}${feature}`;
  console.log('in getData');
  const config = {
    headers,
  };

  // Include user-selected values in the request payload
  const requestData = {
    ...userSelectedValues,
    // Other parameters if needed
  };

  // Return a Promise with axios.post
  return new Promise((resolve, reject) => {
    axios.post<{ data: any }>(url, requestData, config)
      .then((response) => {
        resolve(response);
      })
      .catch((error: AxiosError) => {
        // Handle the error here
        if (error.response) {
          // The request was made and the server responded with a status code
          // that falls out of the range of 2xx
          console.error('Server responded with an error status:', error.response.status);
          console.error('Response data:', error.response.data);
          reject(error.response);
        } else if (error.request) {
          // The request was made but no response was received
          console.error('No response received from the server.');
          reject(error.request);
        } else {
          // Something happened in setting up the request that triggered an Error
          console.error('Error setting up the request:', error.message);
          reject(error.message);
        }
      });
  });
}

}

===Claims.tsx
import React, { forwardRef, useRef } from 'react';
import Grid from '@mui/material/Grid';
import Typography from '@mui/material/Typography';
import { MedicationsTable } from '../medications-table/MedicationsTable/medications-table';
import { ClaimsProps } from './claims.types';
import { Button, TextField } from "@mui/material";
import { useMedicationsTable } from '../useMedicationsTable/use-medications-table';  // Import the hook

export const Claims = forwardRef((props: ClaimsProps, ref: React.Ref<HTMLDivElement>) => {
  const { text, onClickLink } = props;

  // Refs for input fields
  const memberIdRef = useRef<HTMLInputElement | null>(null);
  const fillDtFromRef = useRef<HTMLInputElement | null>(null);
  const fillDtThruRef = useRef<HTMLInputElement | null>(null);
  const tenantIdRef = useRef<HTMLInputElement | null>(null);

  // Call useMedicationsTable hook
  const { reloadTable } = useMedicationsTable();

  const handleSearchClick = () => {
    // Extract input field values
    const memberId = memberIdRef.current?.value;
    const fillDtFrom = fillDtFromRef.current?.value;
    const fillDtThru = fillDtThruRef.current?.value;
    const tenantId = tenantIdRef.current?.value;

    // Call fetchData function with input field values
    fetchData({ memberId, fillDtFrom, fillDtThru, tenantId });
  };

  const fetchData = (inputFields: { memberId?: string, fillDtFrom?: string, fillDtThru?: string, tenantId?: string }) => {
    // Perform data fetching logic using the input fields
    // ...

    // Example: Reload MedicationsTable after data fetch
    reloadTable();
  };

  return (
    <Grid container ref={ref}>
      <Grid item xs={12}>
        <Typography variant="h2">{text}-Search</Typography>

        {/* Input fields */}
        <TextField label="Member ID" inputRef={memberIdRef} />
        <TextField label="Fill Date From" type="date" inputRef={fillDtFromRef} />
        <TextField label="Fill Date Thru" type="date" inputRef={fillDtThruRef} />
        <TextField label="Tenant ID" inputRef={tenantIdRef} />

        {/* Search button */}
        <Button onClick={handleSearchClick}>Search</Button>

        {/* MedicationsTable component */}
        <MedicationsTable title="Claim Result" />
      </Grid>
    </Grid>
  );
});

export default Claims;

